["^ ","~:output",["^ ","~:js","goog.provide('taoensso.truss');\r\ngoog.require('cljs.core');\r\ngoog.require('taoensso.truss.impl');\r\n/**\r\n * Returns current value of dynamic assertion data\r\n */\r\ntaoensso.truss.get_dynamic_assertion_data = (function taoensso$truss$get_dynamic_assertion_data(){\r\nreturn taoensso.truss.impl._STAR__QMARK_data_STAR_;\r\n});\r\ntaoensso.truss._error_fn = (function taoensso$truss$_error_fn(f){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328))){\r\nreturn taoensso.truss.impl.default_error_fn;\r\n} else {\r\nreturn f;\r\n}\r\n});\r\n/**\r\n * Sets the root (fn [data-map-delay]) called on invariant violations.\r\n */\r\ntaoensso.truss.set_error_fn_BANG_ = (function taoensso$truss$set_error_fn_BANG_(f){\r\nreturn (taoensso.truss.impl._STAR_error_fn_STAR_ = taoensso.truss._error_fn(f));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","An opinionated assertions API for Clojure/Script","~:file","taoensso/truss.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",19],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$-invariant","~$taoensso.truss.impl"],"~:excludes",["~#set",[]],"~:name","~$taoensso.truss","~:op","~:ns","~:imports",null,"~:requires",["^ ","^F","^F","~$impl","^F","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^F","^F","^O","^F","^P","^P"],"~:form",["~#list",["~$ns","^J","An opinionated assertions API for Clojure/Script",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^W",["^S",["^F","~:as","^O","~:refer-macros",["^W",["^E"]]]]]]],"~:flags",["^ ","^S",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^F"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","taoensso/truss.cljs"],"~:compiled-at",1579687553152,"~:resource-name","taoensso/truss.cljs","~:warnings",[],"~:source","(ns taoensso.truss\n  \"An opinionated assertions API for Clojure/Script\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n                                                                             \n         (:require [taoensso.truss.impl :as impl :refer-macros (-invariant)]))\n\n(comment (require '[taoensso.encore :as enc :refer (qb)]))\n\n;;;; Core API\n\n              \n                                                                  \n                                                                             \n                                                                     \n\n                                                                         \n                \n\n                                                                          \n                        \n\n                                                                  \n                                              \n\n                                                               \n                                                               \n\n                             \n                                                        \n                                                                    \n\n               \n                                                                                \n                                      \n                                                                     \n                                                                                    \n                                                        \n                                                                        \n\n               \n                                                                              \n                                                             \n                                                        \n                                                              \n\n                \n                                                                           \n                                                                               \n                                   \n\n                                                                           \n                                                                              \n                   \n                                                        \n                                                                         \n\n(comment\n  (let [x 5]      (have    integer? x))\n  (let [x 5]      (have    string?  x))\n  (let [x 5]      (have :! string?  x))\n  (let [x 5 y  6] (have odd?  x x x y x))\n  (let [x 0 y :a] (have zero? x x x y x))\n  (have string? (do (println \"eval1\") \"foo\")\n                (do (println \"eval2\") \"bar\"))\n  (have number? (do (println \"eval1\") 5)\n                (do (println \"eval2\") \"bar\")\n                (do (println \"eval3\") 10))\n  (have nil? false)\n  (have nil)\n  (have false)\n  (have string? :in [\"a\" \"b\"])\n  (have string? :in (if true  [\"a\" \"b\"] [1 2]))\n  (have string? :in (if false [\"a\" \"b\"] [1 2]))\n  (have string? :in (mapv str (range 10)))\n  (have string? :in [\"a\" 1])\n  (have string? :in [\"a\" \"b\"] [\"a\" \"b\"])\n  (have string? :in [\"a\" \"b\"] [\"a\" \"b\" 1])\n  ((fn foo [x] {:pre [(have? integer? x)]} (* x x)) \"foo\")\n  (macroexpand '(have a))\n  (have? [:or nil? string?] \"hello\")\n  (macroexpand '(have? [:or nil? string?] \"hello\"))\n  (have? [:set>= #{:a :b}]    [:a :b :c])\n  (have? [:set<= [:a :b :c]] #{:a :b})\n  (qb 10000\n    (with-error-fn nil                  (have? string? 5))\n    (with-error-fn (fn [_] :truss/error) (have? string? 5))))\n\n(comment\n  ;; HotSpot is great with these:\n  (qb 10000\n    (string? \"a\")\n    (have?   \"a\")\n    (have            string?  \"a\" \"b\" \"c\")\n    (have? [:or nil? string?] \"a\" \"b\" \"c\")\n    (have? [:or nil? string?] \"a\" \"b\" \"c\" :data \"foo\"))\n  ;; [     5.59 26.48 45.82     ] ; 1st gen (macro form)\n  ;; [     3.31 13.48 36.22     ] ; 2nd gen (fn form)\n  ;; [0.82 1.75  7.57 27.05     ] ; 3rd gen (lean macro form)\n  ;; [0.4  0.47  1.3  1.77  1.53] ; 4th gen (macro preds)\n\n  (qb 10000\n    (have  string? :in [\"foo\" \"bar\" \"baz\"])\n    (have? string? :in [\"foo\" \"bar\" \"baz\"]))\n\n  (macroexpand '(have string? 5))\n  (macroexpand '(have string? 5 :data \"foo\"))\n  (macroexpand '(have string? 5 :data (enc/get-env)))\n  (let [x :x]   (have string? 5 :data (enc/get-env)))\n\n  (have string? 5)\n  (have string? 5 :data {:a \"a\"})\n  (have string? 5 :data {:a (/ 5 0)})\n\n  ((fn [x]\n     (let [a \"a\" b \"b\"]\n       (have string? x :data {:env (enc/get-env)}))) 5))\n\n;;;; Utils\n\n(defn get-dynamic-assertion-data\n  \"Returns current value of dynamic assertion data\"\n  [] impl/*?data*)\n\n                                     \n                                                                  \n                                                                     \n                                                       \n\n(comment (with-dynamic-assertion-data \"foo\" (have string? 5 :data \"bar\")))\n\n(defn-   -error-fn [f] (if (= f :default) impl/default-error-fn f))\n(defn set-error-fn!\n  \"Sets the root (fn [data-map-delay]) called on invariant violations.\"\n  [f]\n         (set!             impl/*error-fn*        (-error-fn f))\n                                                                  )\n\n                                  \n                                                     \n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/truss.cljx\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;AAMA,AAkDA,AA+BA,AAgCA;;;AAAA,AAAMA;AAAN,AAEKC;;AAOL,AAEA,AAAA,AAASC,AAAWC;AAApB,AAAuB,AAAI,AAAA,AAACC,AAAED;AAAYE;;AAAsBF;;;AAChE;;;AAAA,AAAMG,AAEHH;AAFH,AAGS,AAAkBI,AAAuB,AAACL,AAAUC","names",["taoensso.truss/get-dynamic-assertion-data","taoensso.truss.impl/*?data*","taoensso.truss/-error-fn","f","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/default-error-fn","taoensso.truss/set-error-fn!","taoensso.truss.impl/*error-fn*"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],[1579687410012,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^Q","~$goog.dom.HtmlElement"]]],["^13","goog/math/math.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","~$goog.array","~$goog.asserts"]]],["^13","goog/html/trustedtypes.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/labs/useragent/browser.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^13","goog/html/safeurl.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1I"]]],["^13","goog/array/array.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F"]]],["^13","goog/debug/error.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/dom/nodetype.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/string/typedstring.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/object/object.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/dom/asserts.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F"]]],"~:SHADOW-TIMESTAMP",[1579687469000,1579687405000],["^13","goog/math/long.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","~$goog.html.trustedtypes","^1L","^1M","^1N","^1O"]]],["^13","taoensso/truss.cljs"],[1579687473542,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^P","^F"]]],["^13","goog/string/internal.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/functions/functions.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/html/safestyle.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1F","~$goog.html.SafeUrl","^1N","^1O","^1I"]]],["^13","goog/dom/safe.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1S","^1K","~$goog.html.uncheckedconversions","^1N","^1I"]]],["^13","taoensso/truss/impl.cljs"],[1579687473542,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^P","~$clojure.set"]]],["^13","goog/structs/map.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","goog/html/safehtml.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1F","~$goog.dom.TagName","~$goog.dom.tags","^1W","^1X","~$goog.html.SafeStyleSheet","^1S","^1K","^1R","^1L","^1M","~$goog.labs.userAgent.browser","^1H","^1N","^1O","^1I"]]],["^13","goog/dom/tags.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1H"]]],["^13","goog/asserts/asserts.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1F","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/i18n/bidi.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/fs/url.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/base.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",[]]],["^13","goog/structs/structs.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1H"]]],["^13","goog/string/string.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","~$goog.dom.safe","^1Y","^1N","^1I"]]],["^13","goog/reflect/reflect.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/labs/useragent/util.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1I"]]],["^13","goog/string/stringbuffer.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","goog/iter/iter.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1F","^1U","~$goog.math"]]],["^13","goog/html/uncheckedconversions.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","^1V","^1W","^1X","^23","^1S","^1K","^1N","^1I"]]],["^13","goog/dom/htmlelement.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q"]]],["^13","cljs/core.cljs"],[1579687405264,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["~$goog.math.Long","~$goog.math.Integer","^27","^1H","^1E","~$goog.Uri","~$goog.string.StringBuffer"]]],["^13","goog/html/safescript.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","^1R","^1N","^1O"]]],["^13","goog/html/safestylesheet.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1F","^1X","^1H","^1N","^1O","^1I"]]],["^13","goog/math/integer.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1Q"]]],["^13","clojure/set.cljs"],[1579687405264,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^P"]]],["^13","goog/uri/utils.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1E","^1F","^27"]]],["^13","goog/string/const.js"],[1579687410012,"^1@",["^ ","^1A",null,"^1B",["^H",[]],"^1C",["^Q","^1F","^1O"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/truss/1.3.5/truss-1.3.5.jar!/taoensso/truss/impl.clj",1579687473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","An opinionated assertions API for Clojure/Script","^8","taoensso/truss.cljs","^9",1,"^:",5,"^;",1,"^<",19],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",["^ ","^E","^F"],"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^F","^F","^O","^F","^P","^P","^Q","^Q"],"^R",["^H",["^S"]],"^T",null,"~:defs",["^ ","~$get-dynamic-assertion-data",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",120,"^:",7,"^;",120,"^<",33,"~:arglists",["^W",["~$quote",["^W",[[]]]]],"^7","Returns current value of dynamic assertion data"],"^I","~$taoensso.truss/get-dynamic-assertion-data","^8","taoensso/truss.cljs","^<",33,"~:method-params",["^W",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^:",1,"~:variadic?",false,"^9",120,"~:ret-tag","~$any","^;",120,"~:max-fixed-arity",0,"~:fn-var",true,"^35",["^W",["^36",["^W",[[]]]]],"^7","Returns current value of dynamic assertion data"],"~$-error-fn",["^ ","^34",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",131,"^:",10,"^;",131,"^<",19,"~:private",true,"^35",["^W",["^36",["^W",[["~$f"]]]]]],"^3A",true,"^I","~$taoensso.truss/-error-fn","^8","taoensso/truss.cljs","^<",19,"^38",["^W",[["~$f"]]],"^39",null,"^3:",["^W",[null,null]],"^:",1,"^3;",false,"^9",131,"^;",131,"^3>",1,"^3?",true,"^35",["^W",["^36",["^W",[["~$f"]]]]]],"~$set-error-fn!",["^ ","^34",null,"^5",["^ ","^8","taoensso/truss.cljs","^9",132,"^:",7,"^;",132,"^<",20,"^35",["^W",["^36",["^W",[["~$f"]]]]],"^7","Sets the root (fn [data-map-delay]) called on invariant violations."],"^I","~$taoensso.truss/set-error-fn!","^8","taoensso/truss.cljs","^<",20,"^38",["^W",[["~$f"]]],"^39",null,"^3:",["^W",[null,null]],"^:",1,"^3;",false,"^9",132,"^;",132,"^3>",1,"^3?",true,"^35",["^W",["^36",["^W",[["~$f"]]]]],"^7","Sets the root (fn [data-map-delay]) called on invariant violations."]],"^U",["^ ","^F","^F","^O","^F","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^H",["~:default"]],"~:order",["^3F"]],"^[",["^ ","^S",["^H",[]]],"^10",["^ "],"^11",["^Q","^P","^F"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1?",[["^3J","~:static-fns"],true,["^3J","~:shadow-tweaks"],null,["^3J","~:elide-asserts"],false,["^3J","~:optimize-constants"],null,["^3J","^16"],null,["^3J","~:external-config"],null,["^3J","~:tooling-config"],null,["^3J","~:emit-constants"],null,["^3J","~:load-tests"],null,["^3J","~:form-size-threshold"],null,["^3J","~:infer-externs"],"~:auto",["^3J","^18"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3J","~:fn-invoke-direct"],null,["^3J","~:source-map"],"/dev/null"]]]