["^ ","~:output",["^ ","~:js","goog.provide('taoensso.timbre');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.string');\r\ngoog.require('taoensso.encore');\r\ngoog.require('taoensso.timbre.appenders.core');\r\nif(cljs.core.vector_QMARK_(taoensso.encore.encore_version)){\r\ntaoensso.encore.assert_min_encore_version(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(67),(2)], null));\r\n} else {\r\ntaoensso.encore.assert_min_encore_version(2.67);\r\n}\r\n/**\r\n * Default (fn [data]) -> string output fn.\r\n *   Use`(partial default-output-fn <opts-map>)` to modify default opts.\r\n */\r\ntaoensso.timbre.default_output_fn = (function taoensso$timbre$default_output_fn(var_args){\r\nvar G__41275 = arguments.length;\r\nswitch (G__41275) {\r\ncase 1:\r\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$1 = (function (data){\r\nreturn taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2(null,data);\r\n}));\r\n\r\n(taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2 = (function (opts,data){\r\nvar map__41277 = opts;\r\nvar map__41277__$1 = (((((!((map__41277 == null))))?(((((map__41277.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41277.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41277):map__41277);\r\nvar no_stacktrace_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41277__$1,new cljs.core.Keyword(null,\"no-stacktrace?\",\"no-stacktrace?\",1701072694));\r\nvar stacktrace_fonts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41277__$1,new cljs.core.Keyword(null,\"stacktrace-fonts\",\"stacktrace-fonts\",830799382));\r\nvar map__41278 = data;\r\nvar map__41278__$1 = (((((!((map__41278 == null))))?(((((map__41278.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41278.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41278):map__41278);\r\nvar level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"level\",\"level\",1290497552));\r\nvar _QMARK_err = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"?err\",\"?err\",549653299));\r\nvar msg_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000));\r\nvar _QMARK_ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966));\r\nvar hostname_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"hostname_\",\"hostname_\",-2091647379));\r\nvar timestamp_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"timestamp_\",\"timestamp_\",-954533417));\r\nvar _QMARK_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41278__$1,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385));\r\nreturn [clojure.string.upper_case(cljs.core.name(level)),\" \",\"[\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4185__auto__ = _QMARK_ns_str;\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nreturn \"?\";\r\n}\r\n})()),\":\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4185__auto__ = _QMARK_line;\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nreturn \"?\";\r\n}\r\n})()),\"] - \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.force(msg_)),(cljs.core.truth_(no_stacktrace_QMARK_)?null:(function (){var temp__5735__auto__ = _QMARK_err;\r\nif(cljs.core.truth_(temp__5735__auto__)){\r\nvar err = temp__5735__auto__;\r\nreturn [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,opts) : taoensso.timbre.stacktrace.call(null,err,opts)))].join('');\r\n} else {\r\nreturn null;\r\n}\r\n})())].join('');\r\n}));\r\n\r\n(taoensso.timbre.default_output_fn.cljs$lang$maxFixedArity = 2);\r\n\r\n\r\ntaoensso.timbre.println_appender = taoensso.timbre.appenders.core.println_appender;\r\ntaoensso.timbre.console_appender = taoensso.timbre.appenders.core.console_appender;\r\n/**\r\n * Example (+default) Timbre v4 config map.\r\n * \r\n *   APPENDERS\r\n *  An appender is a map with keys:\r\n *    :min-level       ; Level keyword, or nil (=> no minimum level)\r\n *    :enabled?        ;\r\n *    :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\r\n *    :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\r\n *    :output-fn       ; Optional override for inherited (fn [data]) -> string\r\n *    :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _}\r\n *    :ns-whitelist    ; Optional, stacks with active config's whitelist\r\n *    :ns-blacklist    ; Optional, stacks with active config's blacklist\r\n *    :middleware-fn   ; Optional, stacks with active config's middleware\r\n *    :fn              ; (fn [data]) -> side effects, with keys described below\r\n * \r\n *  An appender's fn takes a single data map with keys:\r\n *    :config          ; Entire config map (this map, etc.)\r\n *    :appender-id     ; Id of appender currently dispatching\r\n *    :appender        ; Entire map of appender currently dispatching\r\n *    :instant         ; Platform date (java.util.Date or js/Date)\r\n *    :level           ; Keyword\r\n *    :error-level?    ; Is level e/o #{:error :fatal}?\r\n *    :?ns-str         ; String,  or nil\r\n *    :?file           ; String,  or nil\r\n *    :?line           ; Integer, or nil ; Waiting on CLJ-865\r\n *    :?err            ; First-arg platform error, or nil\r\n *    :vargs           ; Vector of raw args\r\n *    :output_         ; Forceable - final formatted output string created\r\n *                     ; by calling (output-fn <this-data-map>)\r\n *    :msg_            ; Forceable - args as a string\r\n *    :timestamp_      ; Forceable - string\r\n *    :hostname_       ; Forceable - string (clj only)\r\n *    :output-fn       ; (fn [data]) -> formatted output string\r\n *                     ; (see `default-output-fn` for details)\r\n *    :context         ; *context* value at log time (see `with-context`)\r\n * \r\n *    **NB** - any keys not specifically documented here should be\r\n *    considered private / subject to change without notice.\r\n * \r\n *   MIDDLEWARE\r\n *  Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\r\n *  transform the data map dispatched to appender fns. If any middleware\r\n *  returns nil, NO dispatch will occur (i.e. the event will be filtered).\r\n * \r\n *   The `example-config` source code contains further settings and details.\r\n *   See also `set-config!`, `merge-config!`, `set-level!`.\r\n */\r\ntaoensso.timbre.example_config = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),taoensso.timbre.default_output_fn,new cljs.core.Keyword(null,\"appenders\",\"appenders\",1245583998),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"console\",\"console\",1228072057),(function (){var G__41281 = cljs.core.PersistentArrayMap.EMPTY;\r\nreturn (taoensso.timbre.console_appender.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre.console_appender.cljs$core$IFn$_invoke$arity$1(G__41281) : taoensso.timbre.console_appender.call(null,G__41281));\r\n})()], null)], null);\r\nif((typeof taoensso !== 'undefined') && (typeof taoensso.timbre !== 'undefined') && (typeof taoensso.timbre._STAR_config_STAR_ !== 'undefined')){\r\n} else {\r\n/**\r\n * See `example-config` for info.\r\n */\r\ntaoensso.timbre._STAR_config_STAR_ = taoensso.timbre.example_config;\r\n}\r\ntaoensso.timbre.swap_config_BANG_ = (function taoensso$timbre$swap_config_BANG_(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___41340 = arguments.length;\r\nvar i__4790__auto___41341 = (0);\r\nwhile(true){\r\nif((i__4790__auto___41341 < len__4789__auto___41340)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___41341]));\r\n\r\nvar G__41342 = (i__4790__auto___41341 + (1));\r\ni__4790__auto___41341 = G__41342;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);\r\nreturn taoensso.timbre.swap_config_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);\r\n});\r\n\r\n(taoensso.timbre.swap_config_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\r\nreturn (taoensso.timbre._STAR_config_STAR_ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,taoensso.timbre._STAR_config_STAR_,args));\r\n}));\r\n\r\n(taoensso.timbre.swap_config_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(taoensso.timbre.swap_config_BANG_.cljs$lang$applyTo = (function (seq41282){\r\nvar G__41283 = cljs.core.first(seq41282);\r\nvar seq41282__$1 = cljs.core.next(seq41282);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41283,seq41282__$1);\r\n}));\r\n\r\ntaoensso.timbre.set_config_BANG_ = (function taoensso$timbre$set_config_BANG_(m){\r\nreturn taoensso.timbre.swap_config_BANG_((function (_old){\r\nreturn m;\r\n}));\r\n});\r\ntaoensso.timbre.merge_config_BANG_ = (function taoensso$timbre$merge_config_BANG_(m){\r\nreturn taoensso.timbre.swap_config_BANG_((function (old){\r\nreturn taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([old,m], 0));\r\n}));\r\n});\r\ntaoensso.timbre.set_level_BANG_ = (function taoensso$timbre$set_level_BANG_(level){\r\nreturn taoensso.timbre.swap_config_BANG_((function (m){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),level);\r\n}));\r\n});\r\ntaoensso.timbre._levels_vec = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null);\r\ntaoensso.timbre._levels_set = cljs.core.set(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null));\r\ntaoensso.timbre._levels_map = cljs.core.zipmap(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null),cljs.core.next(cljs.core.range.cljs$core$IFn$_invoke$arity$0()));\r\ntaoensso.timbre.valid_level_QMARK_ = (function taoensso$timbre$valid_level_QMARK_(x){\r\nif(cljs.core.truth_((taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1(x) : taoensso.timbre._levels_set.call(null,x)))){\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n});\r\ntaoensso.timbre.valid_level = (function taoensso$timbre$valid_level(x){\r\nvar or__4185__auto__ = (taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_set.cljs$core$IFn$_invoke$arity$1(x) : taoensso.timbre._levels_set.call(null,x));\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid Timbre logging level\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),x], null));\r\n}\r\n});\r\ntaoensso.timbre.level_GT__EQ_ = (function taoensso$timbre$level_GT__EQ_(x,y){\r\nreturn ((function (){var G__41284 = taoensso.timbre.valid_level(x);\r\nreturn (taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1(G__41284) : taoensso.timbre._levels_map.call(null,G__41284));\r\n})() >= (function (){var G__41285 = taoensso.timbre.valid_level(y);\r\nreturn (taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1 ? taoensso.timbre._levels_map.cljs$core$IFn$_invoke$arity$1(G__41285) : taoensso.timbre._levels_map.call(null,G__41285));\r\n})());\r\n});\r\ntaoensso.timbre._compile_ns_filter = taoensso.encore.memoize_(taoensso.encore.compile_ns_filter);\r\n/**\r\n * Returns true iff given ns passes white/black lists.\r\n */\r\ntaoensso.timbre.ns_filter = taoensso.encore.memoize_((function (whitelist,blacklist,_QMARK_ns){\r\nvar fexpr__41286 = (taoensso.timbre._compile_ns_filter.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre._compile_ns_filter.cljs$core$IFn$_invoke$arity$2(whitelist,blacklist) : taoensso.timbre._compile_ns_filter.call(null,whitelist,blacklist));\r\nreturn (fexpr__41286.cljs$core$IFn$_invoke$arity$1 ? fexpr__41286.cljs$core$IFn$_invoke$arity$1(_QMARK_ns) : fexpr__41286.call(null,_QMARK_ns));\r\n}));\r\n/**\r\n * Runtime check: would Timbre currently log at the given logging level?\r\n *  * `?ns-str` arg required to support ns filtering\r\n *  * `config`  arg required to support non-global config\r\n */\r\ntaoensso.timbre.may_log_QMARK_ = (function taoensso$timbre$may_log_QMARK_(var_args){\r\nvar G__41288 = arguments.length;\r\nswitch (G__41288) {\r\ncase 1:\r\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (level){\r\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,null,null);\r\n}));\r\n\r\n(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (level,_QMARK_ns_str){\r\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,_QMARK_ns_str,null);\r\n}));\r\n\r\n(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (level,_QMARK_ns_str,_QMARK_config){\r\nvar config = (function (){var or__4185__auto__ = _QMARK_config;\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nreturn taoensso.timbre._STAR_config_STAR_;\r\n}\r\n})();\r\nvar min_level = cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"report\",\"report\",1394055010));\r\nif(taoensso.timbre.level_GT__EQ_(level,min_level)){\r\nvar and__4174__auto__ = (function (){var G__41298 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(config,new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774));\r\nvar G__41299 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(config,new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142));\r\nvar G__41300 = _QMARK_ns_str;\r\nreturn (taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3 ? taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3(G__41298,G__41299,G__41300) : taoensso.timbre.ns_filter.call(null,G__41298,G__41299,G__41300));\r\n})();\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn true;\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n} else {\r\nreturn false;\r\n}\r\n}));\r\n\r\n(taoensso.timbre.may_log_QMARK_.cljs$lang$maxFixedArity = 3);\r\n\r\ntaoensso.timbre.str_join = (function taoensso$timbre$str_join(xs){\r\nreturn taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (x){\r\nvar x__$1 = taoensso.encore.nil__GT_str(x);\r\nif(cljs.core.record_QMARK_(x__$1)){\r\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__$1], 0));\r\n} else {\r\nreturn x__$1;\r\n\r\n}\r\n})),xs);\r\n});\r\nif((typeof taoensso !== 'undefined') && (typeof taoensso.timbre !== 'undefined') && (typeof taoensso.timbre.get_rate_limiter !== 'undefined')){\r\n} else {\r\ntaoensso.timbre.get_rate_limiter = taoensso.encore.memoize_((function (appender_id,specs){\r\nreturn taoensso.encore.limiter(specs);\r\n}));\r\n}\r\n/**\r\n * General-purpose dynamic logging context. Context will be included in\r\n *   appender data map at logging time.\r\n */\r\ntaoensso.timbre._STAR_context_STAR_ = null;\r\ntaoensso.timbre.next_vargs = (function taoensso$timbre$next_vargs(v){\r\nif((cljs.core.count(v) > (1))){\r\nreturn cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(v,(1));\r\n} else {\r\nreturn cljs.core.PersistentVector.EMPTY;\r\n}\r\n});\r\n/**\r\n * Transforms raw vargs -> {:?err _ :?meta _ ...}, extracting:\r\n *   * Special error or ^:meta {} (experimental, undocumented) v0\r\n *   * Message format string\r\n *   * Message string delay\r\n */\r\ntaoensso.timbre.vargs__GT_margs = (function taoensso$timbre$vargs__GT_margs(_QMARK_err,msg_type,vargs){\r\nvar auto_error_QMARK_ = (function (){var G__41304 = _QMARK_err;\r\nvar G__41305 = new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492);\r\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(G__41304,G__41305) : taoensso.encore.kw_identical_QMARK_.call(null,G__41304,G__41305));\r\n})();\r\nvar msg_fmt_QMARK_ = (function (){var G__41306 = msg_type;\r\nvar G__41307 = new cljs.core.Keyword(null,\"f\",\"f\",-1597136552);\r\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(G__41306,G__41307) : taoensso.encore.kw_identical_QMARK_.call(null,G__41306,G__41307));\r\n})();\r\nvar vec__41301 = vargs;\r\nvar v0 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41301,(0),null);\r\nif(cljs.core.truth_((function (){var and__4174__auto__ = auto_error_QMARK_;\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn taoensso.encore.error_QMARK_(v0);\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n})())){\r\nvar vargs__$1 = taoensso.timbre.next_vargs(vargs);\r\nvar _QMARK_msg_fmt = (cljs.core.truth_(msg_fmt_QMARK_)?(function (){var vec__41308 = vargs__$1;\r\nvar v0__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41308,(0),null);\r\nreturn v0__$1;\r\n})():null);\r\nvar vargs__$2 = (cljs.core.truth_(msg_fmt_QMARK_)?taoensso.timbre.next_vargs(vargs__$1):vargs__$1);\r\nvar msg_ = (new cljs.core.Delay((function (){\r\nvar G__41311 = msg_type;\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__41311)){\r\nreturn \"\";\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"p\",\"p\",151049309),G__41311)){\r\nreturn taoensso.timbre.str_join(vargs__$2);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),G__41311)){\r\nreturn taoensso.encore.format_STAR_(((typeof _QMARK_msg_fmt === 'string')?_QMARK_msg_fmt:taoensso.truss.impl._invar_violation_BANG_(true,\"taoensso.timbre\",null,\"(string? ?msg-fmt)\",_QMARK_msg_fmt,null,null)),vargs__$2);\r\n} else {\r\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__41311)].join('')));\r\n\r\n}\r\n}\r\n}\r\n}),null));\r\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"?err\",\"?err\",549653299),v0,new cljs.core.Keyword(null,\"?meta\",\"?meta\",-793560773),null,new cljs.core.Keyword(null,\"?msg-fmt\",\"?msg-fmt\",-852453891),_QMARK_msg_fmt,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000),msg_,new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273),vargs__$2], null);\r\n} else {\r\nvar _QMARK_meta = (cljs.core.truth_(((cljs.core.map_QMARK_(v0))?new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v0)):false))?v0:null);\r\nvar _QMARK_err__$1 = (function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"err\",\"err\",-2089457205).cljs$core$IFn$_invoke$arity$1(_QMARK_meta);\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nif(cljs.core.truth_(auto_error_QMARK_)){\r\nreturn null;\r\n} else {\r\nreturn _QMARK_err;\r\n}\r\n}\r\n})();\r\nvar _QMARK_meta__$1 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(_QMARK_meta,new cljs.core.Keyword(null,\"err\",\"err\",-2089457205));\r\nvar vargs__$1 = (cljs.core.truth_(_QMARK_meta__$1)?taoensso.timbre.next_vargs(vargs):vargs);\r\nvar _QMARK_msg_fmt = (cljs.core.truth_(msg_fmt_QMARK_)?(function (){var vec__41312 = vargs__$1;\r\nvar v0__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41312,(0),null);\r\nreturn v0__$1;\r\n})():null);\r\nvar vargs__$2 = (cljs.core.truth_(msg_fmt_QMARK_)?taoensso.timbre.next_vargs(vargs__$1):vargs__$1);\r\nvar msg_ = (new cljs.core.Delay((function (){\r\nvar G__41315 = msg_type;\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(null,G__41315)){\r\nreturn \"\";\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"p\",\"p\",151049309),G__41315)){\r\nreturn taoensso.timbre.str_join(vargs__$2);\r\n} else {\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),G__41315)){\r\nreturn taoensso.encore.format_STAR_(((typeof _QMARK_msg_fmt === 'string')?_QMARK_msg_fmt:taoensso.truss.impl._invar_violation_BANG_(true,\"taoensso.timbre\",null,\"(string? ?msg-fmt)\",_QMARK_msg_fmt,null,null)),vargs__$2);\r\n} else {\r\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__41315)].join('')));\r\n\r\n}\r\n}\r\n}\r\n}),null));\r\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"?err\",\"?err\",549653299),_QMARK_err__$1,new cljs.core.Keyword(null,\"?meta\",\"?meta\",-793560773),_QMARK_meta__$1,new cljs.core.Keyword(null,\"?msg-fmt\",\"?msg-fmt\",-852453891),_QMARK_msg_fmt,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000),msg_,new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273),vargs__$2], null);\r\n}\r\n});\r\n/**\r\n * Core low-level log fn. Implementation detail!\r\n */\r\ntaoensso.timbre._log_BANG_ = (function taoensso$timbre$_log_BANG_(var_args){\r\nvar G__41317 = arguments.length;\r\nswitch (G__41317) {\r\ncase 9:\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$9((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]));\r\n\r\nbreak;\r\ncase 10:\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$9 = (function (config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data,null);\r\n}));\r\n\r\n(taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10 = (function (config,level,_QMARK_ns_str,_QMARK_file,_QMARK_line,msg_type,_QMARK_err,vargs_,_QMARK_base_data,callsite_id){\r\nif(cljs.core.truth_(taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3(level,_QMARK_ns_str,config))){\r\nvar instant_41390 = taoensso.encore.now_dt();\r\nvar context_41391 = taoensso.timbre._STAR_context_STAR_;\r\nvar vargs_41392 = cljs.core.deref(vargs_);\r\nvar margs_41393 = taoensso.timbre.vargs__GT_margs(_QMARK_err,msg_type,vargs_41392);\r\nvar data_41394 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([_QMARK_base_data,margs_41393,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"hash_\",\"hash_\",-827203612),new cljs.core.Keyword(null,\"instant\",\"instant\",655498374),new cljs.core.Keyword(null,\"config\",\"config\",994861415),new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675),new cljs.core.Keyword(null,\"error-level?\",\"error-level?\",778415885),new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966),new cljs.core.Keyword(null,\"level\",\"level\",1290497552),new cljs.core.Keyword(null,\"vargs_\",\"vargs_\",552132148),new cljs.core.Keyword(null,\"context\",\"context\",-830191113),new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385),new cljs.core.Keyword(null,\"?err_\",\"?err_\",789480858)],[(new cljs.core.Delay((function (){\r\nreturn cljs.core.hash(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [callsite_id,new cljs.core.Keyword(null,\"?msg-fmt\",\"?msg-fmt\",-852453891).cljs$core$IFn$_invoke$arity$1(margs_41393),cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(margs_41393,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"?meta\",\"?meta\",-793560773),new cljs.core.Keyword(null,\"hash\",\"hash\",-13781596)], null),new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273).cljs$core$IFn$_invoke$arity$1(margs_41393))], null));\r\n}),null)),instant_41390,config,_QMARK_file,(function (){var fexpr__41318 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),null,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null], null), null);\r\nreturn (fexpr__41318.cljs$core$IFn$_invoke$arity$1 ? fexpr__41318.cljs$core$IFn$_invoke$arity$1(level) : fexpr__41318.call(null,level));\r\n})(),_QMARK_ns_str,level,(new cljs.core.Delay((function (){\r\nreturn new cljs.core.Keyword(null,\"vargs\",\"vargs\",-966597273).cljs$core$IFn$_invoke$arity$1(margs_41393);\r\n}),null)),context_41391,_QMARK_line,(new cljs.core.Delay((function (){\r\nreturn new cljs.core.Keyword(null,\"?err\",\"?err\",549653299).cljs$core$IFn$_invoke$arity$1(margs_41393);\r\n}),null))])], 0));\r\nvar _QMARK_data_41395 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,mf){\r\nvar result = (mf.cljs$core$IFn$_invoke$arity$1 ? mf.cljs$core$IFn$_invoke$arity$1(acc) : mf.call(null,acc));\r\nif((result == null)){\r\nreturn cljs.core.reduced(null);\r\n} else {\r\nreturn result;\r\n}\r\n}),data_41394,new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504).cljs$core$IFn$_invoke$arity$1(config));\r\nvar temp__5735__auto___41396 = _QMARK_data_41395;\r\nif(cljs.core.truth_(temp__5735__auto___41396)){\r\nvar data_41397__$1 = temp__5735__auto___41396;\r\nvar output_fn1_41398 = taoensso.encore.memoize_(cljs.core.get.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),taoensso.timbre.default_output_fn));\r\ncljs.core.reduce_kv((function (_,id,appender){\r\nif(cljs.core.truth_((function (){var and__4174__auto__ = new cljs.core.Keyword(null,\"enabled?\",\"enabled?\",-1376075057).cljs$core$IFn$_invoke$arity$1(appender);\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn taoensso.timbre.level_GT__EQ_(level,(function (){var or__4185__auto__ = new cljs.core.Keyword(null,\"min-level\",\"min-level\",1634684919).cljs$core$IFn$_invoke$arity$1(appender);\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415);\r\n}\r\n})());\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n})())){\r\nif(cljs.core.truth_((function (){var G__41319 = new cljs.core.Keyword(null,\"ns-whitelist\",\"ns-whitelist\",-1717299774).cljs$core$IFn$_invoke$arity$1(appender);\r\nvar G__41320 = new cljs.core.Keyword(null,\"ns-blacklist\",\"ns-blacklist\",1957763142).cljs$core$IFn$_invoke$arity$1(appender);\r\nvar G__41321 = _QMARK_ns_str;\r\nreturn (taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3 ? taoensso.timbre.ns_filter.cljs$core$IFn$_invoke$arity$3(G__41319,G__41320,G__41321) : taoensso.timbre.ns_filter.call(null,G__41319,G__41320,G__41321));\r\n})())){\r\nvar rate_limit_specs = new cljs.core.Keyword(null,\"rate-limit\",\"rate-limit\",1748082022).cljs$core$IFn$_invoke$arity$1(appender);\r\nvar rate_limit_okay_QMARK_ = (function (){var or__4185__auto__ = cljs.core.empty_QMARK_(rate_limit_specs);\r\nif(or__4185__auto__){\r\nreturn or__4185__auto__;\r\n} else {\r\nvar rl_fn = (taoensso.timbre.get_rate_limiter.cljs$core$IFn$_invoke$arity$2 ? taoensso.timbre.get_rate_limiter.cljs$core$IFn$_invoke$arity$2(id,rate_limit_specs) : taoensso.timbre.get_rate_limiter.call(null,id,rate_limit_specs));\r\nreturn cljs.core.not((function (){var G__41323 = cljs.core.force(new cljs.core.Keyword(null,\"hash_\",\"hash_\",-827203612).cljs$core$IFn$_invoke$arity$1(data_41397__$1));\r\nreturn (rl_fn.cljs$core$IFn$_invoke$arity$1 ? rl_fn.cljs$core$IFn$_invoke$arity$1(G__41323) : rl_fn.call(null,G__41323));\r\n})());\r\n}\r\n})();\r\nif(rate_limit_okay_QMARK_){\r\nvar map__41324 = appender;\r\nvar map__41324__$1 = (((((!((map__41324 == null))))?(((((map__41324.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41324.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41324):map__41324);\r\nvar apfn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41324__$1,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\r\nvar async_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41324__$1,new cljs.core.Keyword(null,\"async?\",\"async?\",1523057758));\r\nvar output_fn = (function (){var f = new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539).cljs$core$IFn$_invoke$arity$1(appender);\r\nif(cljs.core.truth_((function (){var or__4185__auto__ = (f == null);\r\nif(or__4185__auto__){\r\nreturn or__4185__auto__;\r\n} else {\r\nvar G__41328 = f;\r\nvar G__41329 = new cljs.core.Keyword(null,\"inherit\",\"inherit\",-1840815422);\r\nreturn (taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2 ? taoensso.encore.kw_identical_QMARK_.cljs$core$IFn$_invoke$arity$2(G__41328,G__41329) : taoensso.encore.kw_identical_QMARK_.call(null,G__41328,G__41329));\r\n}\r\n})())){\r\nreturn output_fn1_41398;\r\n} else {\r\nreturn f;\r\n}\r\n})();\r\nvar output_ = (new cljs.core.Delay((function (){\r\nreturn (output_fn.cljs$core$IFn$_invoke$arity$1 ? output_fn.cljs$core$IFn$_invoke$arity$1(data_41397__$1) : output_fn.call(null,data_41397__$1));\r\n}),null));\r\nvar data__$2 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(data_41397__$1,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"appender-id\",\"appender-id\",-1917983538),id,new cljs.core.Keyword(null,\"appender\",\"appender\",1267426510),appender,new cljs.core.Keyword(null,\"output-fn\",\"output-fn\",1600951539),output_fn,new cljs.core.Keyword(null,\"output_\",\"output_\",-36797880),output_], null));\r\nvar _QMARK_data__$1 = (function (){var temp__5733__auto__ = new cljs.core.Keyword(null,\"middleware-fn\",\"middleware-fn\",-61585752).cljs$core$IFn$_invoke$arity$1(appender);\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar mfn = temp__5733__auto__;\r\nreturn (mfn.cljs$core$IFn$_invoke$arity$1 ? mfn.cljs$core$IFn$_invoke$arity$1(data__$2) : mfn.call(null,data__$2));\r\n} else {\r\nreturn data__$2;\r\n}\r\n})();\r\nvar temp__5735__auto____$1 = _QMARK_data__$1;\r\nif(cljs.core.truth_(temp__5735__auto____$1)){\r\nvar data__$3 = temp__5735__auto____$1;\r\nreturn (apfn.cljs$core$IFn$_invoke$arity$1 ? apfn.cljs$core$IFn$_invoke$arity$1(data__$3) : apfn.call(null,data__$3));\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}),null,new cljs.core.Keyword(null,\"appenders\",\"appenders\",1245583998).cljs$core$IFn$_invoke$arity$1(config));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn null;\r\n}));\r\n\r\n(taoensso.timbre._log_BANG_.cljs$lang$maxFixedArity = 10);\r\n\r\ntaoensso.timbre.stacktrace = (function taoensso$timbre$stacktrace(var_args){\r\nvar G__41331 = arguments.length;\r\nswitch (G__41331) {\r\ncase 1:\r\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$1 = (function (err){\r\nreturn taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2(err,null);\r\n}));\r\n\r\n(taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2 = (function (err,opts){\r\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(err);\r\n}));\r\n\r\n(taoensso.timbre.stacktrace.cljs$lang$maxFixedArity = 2);\r\n\r\ntaoensso.timbre.console__QMARK_appender = taoensso.timbre.appenders.core.console_appender;\r\n\r\ntaoensso.timbre.ordered_levels = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trace\",\"trace\",-1082747415),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),new cljs.core.Keyword(null,\"report\",\"report\",1394055010)], null);\r\n\r\ntaoensso.timbre.log_QMARK_ = taoensso.timbre.may_log_QMARK_;\r\n\r\ntaoensso.timbre.logging_enabled_QMARK_ = (function taoensso$timbre$logging_enabled_QMARK_(level,compile_time_ns){\r\nreturn taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2(level,cljs.core.str.cljs$core$IFn$_invoke$arity$1(compile_time_ns));\r\n});\r\n\r\ntaoensso.timbre.str_println = (function taoensso$timbre$str_println(var_args){\r\nvar args__4795__auto__ = [];\r\nvar len__4789__auto___41408 = arguments.length;\r\nvar i__4790__auto___41409 = (0);\r\nwhile(true){\r\nif((i__4790__auto___41409 < len__4789__auto___41408)){\r\nargs__4795__auto__.push((arguments[i__4790__auto___41409]));\r\n\r\nvar G__41410 = (i__4790__auto___41409 + (1));\r\ni__4790__auto___41409 = G__41410;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4796__auto__ = ((((0) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((0)),(0),null)):null);\r\nreturn taoensso.timbre.str_println.cljs$core$IFn$_invoke$arity$variadic(argseq__4796__auto__);\r\n});\r\n\r\n(taoensso.timbre.str_println.cljs$core$IFn$_invoke$arity$variadic = (function (xs){\r\nreturn taoensso.timbre.str_join(xs);\r\n}));\r\n\r\n(taoensso.timbre.str_println.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(taoensso.timbre.str_println.cljs$lang$applyTo = (function (seq41332){\r\nvar self__4777__auto__ = this;\r\nreturn self__4777__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq41332));\r\n}));\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis (@ptaoussanis)","~:doc","Simple, flexible logging for Clojure/Script. No XML.","~:file","taoensso/timbre.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$have?","^F"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$get-env",["^ ","~:arglists",["~#list",[[]]],"^9",642,"^:",1,"^8","taoensso/timbre.clj","~:name","~$taoensso.timbre/get-env","~:ns","~$taoensso.timbre","~:macro",true],"~$-log-and-rethrow-errors",["^ ","^L",["^M",[["~$?line","~$&","~$body"]]],"^9",591,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/-log-and-rethrow-errors","^P","^Q","^R",true],"~$log",["^ ","^L",["^M",[["~$level","~$&","~$args"]]],"^9",560,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/log","^P","^Q","^R",true],"~$logf",["^ ","^L",["^M",[["^X","~$&","^Y"]]],"^9",571,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/logf","^P","^Q","^R",true],"~$reportf",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",578,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/reportf","^P","^Q","^R",true],"~$fatalf",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",577,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/fatalf","^P","^Q","^R",true],"~$warnf",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",575,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/warnf","^P","^Q","^R",true],"~$log!",["^ ","^L",["^M",[["^X","~$msg-type","^Y","~$&",["~$opts"]]]],"^7","Core low-level log macro. Useful for tooling, etc.\n\n    * `level`    - must eval to a valid logging level\n    * `msg-type` - must eval to e/o #{:p :f nil}\n    * `opts`     - ks e/o #{:config :?err :?ns-str :?file :?line :?base-data}\n\n  Supports compile-time elision when compile-time const vals\n  provided for `level` and/or `?ns-str`.","^9",494,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/log!","^P","^Q","^R",true],"~$report",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",567,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/report","^P","^Q","^R",true],"~$-spy",["^ ","^L",["^M",[["^T","~$config","^X","~$name","~$expr"]]],"^9",624,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/-spy","^P","^Q","^R",true],"~$with-default-outs",["^ ","^L",["^M",[["~$&","^U"]]],"^9",675,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-default-outs","^P","^Q","^R",true],"~$logf*",["^ ","^L",["^M",[["^1>","^X","~$&","^Y"]]],"^9",570,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/logf*","^P","^Q","^R",true],"~$spy",["^ ","^L",["^M",[["^1@"],["^X","^1@"],["^X","^1?","^1@"],["^1>","^X","^1?","^1@"]]],"^7","Evaluates named expression and logs its result. Always returns the result.\n  Defaults to :debug logging level and unevaluated expression as name.","^9",634,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/spy","^P","^Q","^R",true],"~$sometimes",["^ ","^L",["^M",[["~$probability","~$&","^U"]]],"^7","Handy for sampled logging, etc.","^9",723,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/sometimes","^P","^Q","^R",true],"~$warn",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",564,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/warn","^P","^Q","^R",true],"~$with-level",["^ ","^L",["^M",[["^X","~$&","^U"]]],"^9",150,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-level","^P","^Q","^R",true],"~$trace",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",561,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/trace","^P","^Q","^R",true],"~$-log-errors",["^ ","^L",["^M",[["^T","~$&","^U"]]],"^9",585,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/-log-errors","^P","^Q","^R",true],"~$debug",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",562,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/debug","^P","^Q","^R",true],"~$log*",["^ ","^L",["^M",[["^1>","^X","~$&","^Y"]]],"^9",559,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/log*","^P","^Q","^R",true],"~$debugf",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",573,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/debugf","^P","^Q","^R",true],"~$tracef",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",572,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/tracef","^P","^Q","^R",true],"~$-logged-future",["^ ","^L",["^M",[["^T","~$&","^U"]]],"^9",598,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/-logged-future","^P","^Q","^R",true],"~$infof",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",574,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/infof","^P","^Q","^R",true],"~$logged-future",["^ ","^L",["^M",[["~$&","^U"]]],"^9",602,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/logged-future","^P","^Q","^R",true],"~$log-env",["^ ","^L",["^M",[[],["^X"],["^X","^1?"],["^1>","^X","^1?"]]],"^9",739,"^:",3,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/log-env","^P","^Q","^R",true],"~$fatal",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",566,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/fatal","^P","^Q","^R",true],"~$log-and-rethrow-errors",["^ ","^L",["^M",[["~$&","^U"]]],"^9",601,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/log-and-rethrow-errors","^P","^Q","^R",true],"~$with-logging-config",["^ ","^L",["^M",[["^1>","~$&","^U"]]],"^9",737,"^:",3,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-logging-config","^P","^Q","^R",true],"~$with-merged-config",["^ ","^L",["^M",[["^1>","~$&","^U"]]],"^9",139,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-merged-config","^P","^Q","^R",true],"~$with-context",["^ ","^L",["^M",[["~$context","~$&","^U"]]],"^9",284,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-context","^P","^Q","^R",true],"~$log-errors",["^ ","^L",["^M",[["~$&","^U"]]],"^9",600,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/log-errors","^P","^Q","^R",true],"~$errorf",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",576,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/errorf","^P","^Q","^R",true],"~$info",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",563,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/info","^P","^Q","^R",true],"~$logp",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",738,"^:",3,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/logp","^P","^Q","^R",true],"~$with-config",["^ ","^L",["^M",[["^1>","~$&","^U"]]],"^9",138,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-config","^P","^Q","^R",true],"~$error",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",565,"^:",1,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/error","^P","^Q","^R",true],"~$with-log-level",["^ ","^L",["^M",[["^X","~$&","^U"]]],"^9",736,"^:",3,"^8","taoensso/timbre.clj","^N","~$taoensso.timbre/with-log-level","^P","^Q","^R",true]],"^N","^Q","~:op","^P","~:imports",null,"~:requires",["^ ","~$clojure.string","^2S","~$str","^2S","^F","^F","~$enc","^F","~$taoensso.timbre.appenders.core","^2V","~$core-appenders","^2V","~$cljs.core","^2X","~$goog","^2Y"],"~:seen",["^I",["~:require","~:require-macros"]],"~:uses",null,"^30",["^ ","^F","^F","^2U","^F","^Q","^Q","~$timbre-macros","^Q","^2X","^2X"],"~:form",["^M",["~$ns","^Q","Simple, flexible logging for Clojure/Script. No XML.",["^ ","^6","Peter Taoussanis (@ptaoussanis)"],["^M",["^2[",["^2S","~:as","^2T"],["^F","^35","^2U","~:refer",["^M",[]],"~:refer-macros",["^M",["^E","^G"]]],["^2V","^35","^2W"]]],["^M",["^30",["^Q","^35","^32","^36",["^M",[]]]]]]],"~:flags",["^ ","^2[",["^I",[]],"^30",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^2Y","^2X","^2S","^F","^2V"]],"^P","^Q","~:resource-id",["~:shadow.build.classpath/resource","taoensso/timbre.cljs"],"~:compiled-at",1579687557092,"~:resource-name","taoensso/timbre.cljs","~:warnings",[],"~:source","(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer () :refer-macros (have have?)]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer ()]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 67 2])\n  (enc/assert-min-encore-version  2.67))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _}\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :middleware-fn   ; Optional, stacks with active config's middleware\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                                 \n                                                        \n                                                              \n                                                                 \n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                                                             \n                                      \n\n                         \n                                                                                      \n                                                                                       \n                                                                                               \n                                                                                               \n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (ns-filter\n         (get config :ns-whitelist)\n         (get config :ns-blacklist)\n         ?ns-str)\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context*\n  \"General-purpose dynamic logging context. Context will be included in\n  appender data map at logging time.\"\n  nil)\n\n                                       \n                                         \n\n(defn-   next-vargs [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- vargs->margs\n  \"Transforms raw vargs -> {:?err _ :?meta _ ...}, extracting:\n  * Special error or ^:meta {} (experimental, undocumented) v0\n  * Message format string\n  * Message string delay\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        msg-fmt?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [vargs    (next-vargs vargs)\n            ?msg-fmt (if msg-fmt? (let [[v0] vargs] v0) nil)\n            vargs    (if msg-fmt? (next-vargs vargs) vargs)\n            msg_     (delay\n                      (case msg-type\n                        nil \"\"\n                        :p  (str-join                            vargs)\n                        :f  (enc/format* (have string? ?msg-fmt) vargs)))]\n\n        {:?err v0 :?meta nil :?msg-fmt ?msg-fmt :msg_ msg_ :vargs vargs})\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (next-vargs vargs) vargs)\n            ?msg-fmt (if msg-fmt? (let [[v0] vargs] v0) nil)\n            vargs    (if msg-fmt? (next-vargs vargs) vargs)\n            msg_     (delay\n                      (case msg-type\n                        nil \"\"\n                        :p  (str-join                            vargs)\n                        :f  (enc/format* (have string? ?msg-fmt) vargs)))]\n\n        {:?err ?err :?meta ?meta :?msg-fmt ?msg-fmt :msg_ msg_ :vargs vargs}))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (vargs->margs :auto :f [\"fmt\" :a :b :c])\n      (vargs->margs :auto :p [ex    :a :b :c])\n      (vargs->margs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (vargs->margs :auto :p [       {:foo :bar} :a :b :c])\n      (vargs->margs :auto :p [ex])\n      (vargs->margs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          ;; {:keys [?err ?meta ?msg-fmt msg_ vargs]}:\n          margs (vargs->margs ?err msg-type vargs)\n          data\n          (merge\n           ?base-data\n           margs\n           {:instant instant\n            :level   level\n            :context context\n            :config  config ; Entire config!\n            :?ns-str ?ns-str\n            :?file   ?file\n            :?line   ?line\n                                                         \n            :error-level? (#{:error :fatal} level)\n\n            ;; Uniquely identifies a particular logging call for purposes of\n            ;; rate limiting, etc.\n            :hash_ ; TODO Undocumented (experimental)\n            (delay\n             (hash\n              ;; Nb excl. instant\n              [callsite-id ; Only useful for direct macro calls\n               (:?msg-fmt margs)\n               (get-in margs [:?meta :hash] ; Explicit hash provided\n                 (:vargs margs))]))\n\n            ;; :?err     <from-margs>\n            ;; :?meta    <from-margs> ; TODO Undocumented (experimental)\n            ;; :?msg-fmt <from-margs> ; TODO Undocumented (experimental)\n            ;; :msg_     <from-margs>\n            ;; :vargs    <from-margs>\n\n            ;;; Deprecated\n            :?err_  (delay (:?err  margs))\n            :vargs_ (delay (:vargs margs))})\n\n          ?data\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data)\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                        \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;AAoBA,AAAI,AAACA,AAAQC;AACX,AAAA,AAAA,AAAA,AAAA,AAACC;;AACD,AAAA,AAACA;;AAWH,AAAA,AACA,AAAA;;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAGGE;AAHT,AAGe,AAAA,AAACC,AAAsBD;;;AAHtC,AAAA,AAAA,AAAMF,AAIFI,AAAKF;AAJT,AAKG,AAAAG,AAAgDD;AAAhDC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcM;AAAd,AAAAF,AAAAJ,AAAA,AAA6BO;AAA7BF,AAEiCR;AAFjCQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAA,AAAAD,AAAAC,AAAA,AACcG;AADd,AAAAJ,AAAAC,AAAA,AACoBI;AADpB,AAAAL,AAAAC,AAAA,AACiCK;AADjC,AAAAN,AAAAC,AAAA,AACsCM;AADtC,AAAAP,AAAAC,AAAA,AAC8CO;AAD9C,AAAAR,AAAAC,AAAA,AAEcQ;AAFd,AAAAT,AAAAC,AAAA,AAEyBS;AAFzB,AAGE,AAAA,AAAA,AAGE,AAACC,AAAe,AAACC,AAAKR,AAClB,AAAAS,AAAIN;AAAJ,AAAA,AAAAM;AAAAA;;AAAA;;AAJN,AAI2B,AAAAA,AAAIH;AAAJ,AAAA,AAAAG;AAAAA;;AAAA;;AAJ3B,AAKE,AAACC,AAAMR,AACP,AAAA,AAAA,AAAUJ,AACR,AAAAa,AAAeV;AAAf,AAAA,AAAAU;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAA,AAAU,AAACC,AAAAA,AAAAA,AAAWD,AAAAA,AAAIrB,AAAAA;;AAD5B;;;;;AAfT,AAAA,AAAA,AAAMJ;;AAAN,AAmBA,AAAA;AAAA,AAGO,AAAK2B,AAAiBC;AACtB,AAAKC,AAAiBC;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AA6DS/B,AAUD,AAAAgC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACH,AAAAA,AAAAA;;AAEd,AAIA,AAAA,AAAAI,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;AAAuBC,AAA0CL;;AAKjE,AAAA,AAAA,AAAAjC,AAAM4C;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAcM,AAAIC;AAAxB,AACS,AAAwBb,AAAS,AAACc,AAAMF,AAAEZ,AAASa;;;AAD5D,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAIA,AAAA,AAAQQ,AAAaC;AAArB,AAAwB,AAACV,AAAa,AAAKW;AAAL,AAAWD;;;AACjD,AAAA,AAAME,AAAeF;AAArB,AAAwB,AAACV,AAAa,AAAKa;AAAL,AAAU,AAACC,AAAiBD,AAAIH;;;AAEtE,AAAA,AAAUK,AAAY5C;AAAtB,AAA6B,AAAC6B,AAAa,AAAKU;AAAL,AAAQ,AAAA,AAACM,AAAMN,AAASvC;;;AAInE,AAMA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAa8C;AACb,AAAaC,AAAY,AAACC,AAAOF,AAAA;AACjC,AAAaG,AAAY,AAACC,AAAOJ,AAAA,AAAY,AAACb,AAAK,AAACkB;AAEpD,AAAA,AAAMC,AAAcC;AAApB,AAAuB,AAAI,AAACN,AAAAA,AAAAA,AAAYM,AAAAA;AAAjB;;AAAA;;;AACvB,AAAA,AAAMC,AAAcD;AAApB,AACE,AAAA5C,AAAI,AAACsC,AAAAA,AAAAA,AAAYM,AAAAA;AAAjB,AAAA,AAAA5C;AAAAA;;AACI,AAAO,AAAA,AAAA,AAAA,AAAC8C,AAA+CF;;;AAE7D,AAAA,AAAMG,AAASH,AAAEI;AAAjB,AACE,AAAI,AAAAC,AAAmB,AAACJ,AAAYD;AAAhC,AAAA,AAAAK,AAAAA,AAAOT,AAAAA,AAAAA;AACP,AAAAU,AAAmB,AAACL,AAAYG;AAAhC,AAAA,AAAAE,AAAAA,AAAOV,AAAAA,AAAAA;;;AAEb,AAIA,AAAeW,AAAmB,AAACC,AAAaC;AAChD;;;AAAwBC,AAEtB,AAACF,AACC,AAAKG,AAAUC,AAAUC;AAAzB,AACE,AAAAC,AAAC,AAACP,AAAAA,AAAAA,AAAmBI,AAAAA,AAAUC,AAAAA;AAA/B,AAAA,AAAAE,AAAAA,AAAAA,AAA0CD,AAAAA;;AAEhD,AA2CA,AAAA;;;;;AAAA,AAAAjF,AAAqCoF;AAArC,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjF,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAqCiF,AAIjCrE;AAJJ,AAI2B,AAAA,AAAA,AAACsE,AAAStE;;;AAJrC,AAAA,AAAA,AAAqCqE,AAKjCrE,AAAMG;AALV,AAK2B,AAAA,AAACmE,AAAStE,AAAMG;;;AAL3C,AAAA,AAAA,AAAqCkE,AAMjCrE,AAAMG,AAAQoE;AANlB,AAOG,AAAMC,AAAU,AAAA/D,AAAK8D;AAAL,AAAA,AAAA9D;AAAAA;;AAAac;;;AACvBkD,AAAU,AAAA,AAAA,AAACC,AAAKF;AADtB,AAEE,AACE,AAAChB,AAAQxD,AAAMyE;AADjB,AAAAE,AAEE,AAAAC,AACE,AAAA,AAAChF,AAAI4E;AADPK,AAEE,AAAA,AAACjF,AAAI4E;AAFPM,AAGE3E;AAHF,AAAA,AAAAyE,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACf,AAAAA,AAAAA;;AAFH,AAAA,AAAAY;AAAA;;AAAAA;;;AAAA;;;;AATL,AAAA,AAAA,AAAqCN;;AAArC,AAiBA,AAIA,AAAA,AAEA,AACE,AAAA,AAAOU,AAAUC;AAAjB,AACE,AAAA,AAACC,AACC,AAACC,AACC,AAAK7B;AAAL,AACE,AAAMA,AAAE,AAAC8B,AAAa9B;AAAtB,AACE,AACE,AAAC+B,AAAiB/B;AAAG,AAACgC,AAAOhC;;AAD/B,AAGQA;;;AACd2B;;AAGN,AAQA,AAEA,AAAA,AAAA5D,AAAAC,AAAAiE;AAAA;AAAA,AAAA,AAAmBC,AACjB,AAAC1B,AAAa,AAAK2B,AAAYC;AAAjB,AAAwB,AAACC,AAAYD;;;AAErD,AAIA;;;;AAAA,AAAeE;AAQf,AAAA,AAASC,AAAYC;AAArB,AAAwB,AAAI,AAAA,AAAG,AAACC,AAAMD;AAAM,AAAA,AAACE,AAAOF;;AAA5B;;;AACxB;;;;;;AAAA,AAAOG,AAKJ/F,AAAKgG,AAASC;AALjB,AAME,AAAMG,AAAY,AAAAC,AAAmBrG;AAAnBsG,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AACbC,AAAY,AAAAC,AAAmBT;AAAnBU,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACH,AAAAA,AAAAA;;AADnBL,AAEWD;AAFX,AAAAE,AAAAD,AAAA,AAAA,AAEOS;AAFP,AAIE,AAAI,AAAAjC,AAAK0B;AAAL,AAAA,AAAA1B;AAAiB,AAACkC,AAAWD;;AAA7BjC;;;AACF,AAAMuB,AAAS,AAACN,AAAWM;AACrBY,AAAS,AAAIL,AAAS,AAAAM,AAAWb;AAAX,AAAAE,AAAAW,AAAA,AAAA,AAAOH;AAAP,AAAkBA;AAA/B;AACTV,AAAS,AAAIO,AAAS,AAACb,AAAWM,AAAOA;AACzChG,AAAS,AAAA8G,AAAA;AAAA,AACC,AAAAC,AAAMhB;AAAN,AAAA,AAAA,AAAAiB,AAAA,AAAAD;AAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAD;AAEM,AAAClC,AAAoCmB;;AAF3C,AAAA,AAAAgB,AAAA,AAAAD;AAGM,AAACE,AAAY,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAcN,AAAAA,AAAAA,AAAUZ;;AAH3C,AAAA,AAAA,AAAA9G,AAAA,AAAA,AAAA6H;;;;;AADD;AAHf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASSL,AAAwBE,AAAe5G,AAAYgG;;AAE5D,AAAMmB,AAAS,AAAA,AAAI,AAAA,AAAK,AAACC,AAAKV,AAAI,AAAA,AAAO,AAACW,AAAKX,AAAMA;AAC/C3G,AAAS,AAAAQ,AAAI,AAAA,AAAM4G;AAAV,AAAA,AAAA5G;AAAAA;;AAAiB,AAAI4F;AAAJ;;AAAoBpG;;;;AAC9CoH,AAAS,AAAA,AAACG,AAAOH;AACjBnB,AAAS,AAAImB,AAAM,AAACzB,AAAWM,AAAOA;AACtCY,AAAS,AAAIL,AAAS,AAAAgB,AAAWvB;AAAX,AAAAE,AAAAqB,AAAA,AAAA,AAAOb;AAAP,AAAkBA;AAA/B;AACTV,AAAS,AAAIO,AAAS,AAACb,AAAWM,AAAOA;AACzChG,AAAS,AAAA8G,AAAA;AAAA,AACC,AAAAU,AAAMzB;AAAN,AAAA,AAAA,AAAAiB,AAAA,AAAAQ;AAAA;;AAAA,AAAA,AAAAR,AAAA,AAAAQ;AAEM,AAAC3C,AAAoCmB;;AAF3C,AAAA,AAAAgB,AAAA,AAAAQ;AAGM,AAACP,AAAY,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAcN,AAAAA,AAAAA,AAAUZ;;AAH3C,AAAA,AAAA,AAAA9G,AAAA,AAAA,AAAAsI;;;;;AADD;AANf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYSzH,AAAYoH,AAAgBP,AAAe5G,AAAYgG;;;AAEtE,AAcA,AAAA;;;AAAA,AAAAjH,AAAM2I;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAxI,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMwI,AAIFpD,AAAOxE,AAAMG,AAAQ0H,AAAMvH,AAAM2F,AAAShG,AAAK6H,AAAOC;AAJ1D,AAMG,AAAA,AAACC,AAAMxD,AAAOxE,AAAMG,AAAQ0H,AAAMvH,AAAM2F,AAAShG,AAAK6H,AACpDC;;;AAPL,AAAA,AAAA,AAAMH,AASFpD,AAAOxE,AAAMG,AAAQ0H,AAAMvH,AAAM2F,AAAShG,AAAK6H,AAC/CC,AAAWE;AAVf,AAYE,AAAM,AAAC3D,AAAStE,AAAMG,AAAQqE;AAA9B,AACE,AAAM2D,AAAQ,AAACC;AACTC,AAAQ1C;AADd,AAAAuC,AAEMhC,AAAS4B;AAGTQ,AAAM,AAACtC,AAAa/F,AAAKgG,AAASC;AAClC7G,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACkJ,AACAR,AACAO,AAcC,AAAAtB,AAAA;AAAA,AACC,AAAA,AAACyB,AAECR,AACA,AAAA,AAAWK,AACX,AAAA,AAAA,AAAA,AAACI,AAAOJ,AACN,AAAA,AAAQA;AAnBJH,AAGA3D,AAEAqD,AAGK,AAAAW,AAAA,AAAA,AAAA,AAKd;AALc,AAAA,AAAAA,AAAAA,AAAAA,AAAkBxI,AAAAA;AAPvBA,AAGAG,AAyBD,AAAA6G,AAAA;AAAA,AAAO,AAAA,AAAQsB;AA3BdD,AAIA/H,AAsBD,AAAA0G,AAAA,AACA;AADA,AAAO,AAAA,AAAQsB;AAAf;AAGVK,AACA,AAACC,AACC,AAAKC,AAAIC;AAAT,AACE,AAAMC,AAAO,AAACD,AAAAA,AAAAA,AAAGD,AAAAA;AAAjB,AACE,AAAI,AAAA,AAAME;AACR,AAAA,AAACC;;AACDD;;AACN1J,AACA,AAAA,AAAamF;AAjDrB,AAmDE,AAAA7D,AAAgBgI;AAAhB,AAAA,AAAAhI;AAAA,AAAA,AAAAA,AAAWtB;AAAX,AACE,AAEM4J,AAAW,AAACpF,AAAa,AAAA,AAACa,AAAIF,AAAkBrF;AAFtD,AAeE,AAAC+J,AACA,AAAKC,AAAEC,AAAGC;AAAV,AACE,AAAM,AAAA1E,AAAK,AAAA,AAAW0E;AAAhB,AAAA,AAAA1E;AACK,AAACnB,AAAQxD,AAAM,AAAAS,AAAI,AAAA,AAAY4I;AAAhB,AAAA,AAAA5I;AAAAA;;AAAA;;;;AADpBkE;;;AAAN,AAIE,AAAM,AAAA2E,AAAW,AAAA,AAAeD;AAA1BE,AACW,AAAA,AAAeF;AAD1BG,AAEWrJ;AAFX,AAAA,AAAAmJ,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACzF,AAAAA,AAAAA;;AAAP,AAIE,AAAM0F,AAAiB,AAAA,AAAaJ;AAC9BK,AACA,AAAAjJ,AACC,AAACkJ,AAAOF;AADT,AAAA,AAAAhJ;AAAAA;;AAEC,AAAMmJ,AAAM,AAACrE,AAAAA,AAAAA,AAAiB6D,AAAAA,AAAGK,AAAAA;AAAjC,AACE,AAACI,AAAI,AAAAC,AAAO,AAACpJ,AAAM,AAAA,AAAQrB;AAAtB,AAAA,AAAAyK,AAAAA,AAACF,AAAAA,AAAAA;;;;AALf,AAOE,AAAMF;AAAN,AACE,AAAAK,AAAgCV;AAAhCU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtK,AAAA,AAAAsK,AAAA,AAAA,AAAA,AAAA,AAAArK,AAAAC,AAAAoK,AAAAA;AAAA,AAAAnK,AAAAmK,AAAA,AAAsBE;AAAtB,AAAArK,AAAAmK,AAAA,AAAcC;AAERE,AACA,AAAM/H,AAAE,AAAA,AAAYkH;AAApB,AACE,AAAI,AAAA5I,AAAI,AAAA,AAAM0B;AAAV,AAAA,AAAA1B;AAAAA;;AAAa,AAAA0J,AAAmBhI;AAAnBiI,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAAC5D,AAAAA,AAAAA;;;AAChByC;;AACA9G;;;AASJkI,AACA,AAAArD,AAAA;AAAA,AACC,AAACkD,AAAAA,AAAAA,AAEO7K,AAAAA;AAHT;AAKAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACiL,AAAKjL,AACU+J,AACAC,AACAa,AACAG;AAGhB1B,AACA,AAAA4B,AAAa,AAAA,AAAgBlB;AAA7B,AAAA,AAAAkB;AAAA,AAAAA,AAASC;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAInL,AAAAA;;AACLA;;;AAhCR,AAkCE,AAAAsB,AAAgBgI;AAAhB,AAAA,AAAAhI;AAAA,AAAA,AAAAA,AAAWtB;AAAX,AASS,AAAC4K,AAAAA,AAAAA,AAAK5K,AAAAA;;AATf;;;AAnCJ;;;AAXJ;;;AAJF;;AAFH,AAmEC,AAAA,AAAYmF;;AAnFjB;;AApDJ;;AAZF;;;AAAA,AAAA,AAAA,AAAMoD;;AAAN,AAsJA,AAuCA,AAOA,AA8CA,AAsCA,AAyBA,AAqDA,AAOA,AAAA,AAAA,AAAA3I,AAAM4B;AAAN,AAAA,AAAA4J,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA5J,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAzB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMyB,AACFD;AADJ,AACc,AAAA,AAAC8J,AAAW9J;;;AAD1B,AAAA,AAAA,AAAMC,AAEFD,AAAIrB;AAFR,AAGU,AAAKqB;;;AAHf,AAAA,AAAA,AAAMC;;AAAN,AAkBA,AASA,AACS,AAAK8J,AAAkB1J;;AAC9B,AAAK2J,AAAe9H,AAAA;;AACpB,AAAK+H,AAAKxG;;AACV,AAAA,AAAMyG,AAAkB9K,AAAM+K;AAA9B,AAA+C,AAACC,AAAShL,AAAM,AAAK+K;;;AACpE,AAAA,AAAA,AAAA9L,AAAMgM;AAAN,AAAA,AAAAzJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyJ,AAAAtJ;;;AAAA,AAAA,AAAA,AAAA,AAAMsJ,AAAoBjG;AAA1B,AAA8B,AAACD,AAASC;;;AAAxC,AAAA,AAAA,AAAMiG;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA","names",["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__41275","taoensso.timbre/default-output-fn","js/Error","data","taoensso.timbre.default_output_fn.cljs$core$IFn$_invoke$arity$2","opts","map__41277","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__41278","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4185__auto__","cljs.core/force","temp__5735__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","G__41281","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq41282","G__41283","cljs.core/first","cljs.core/next","self__4776__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore.nested_merge.cljs$core$IFn$_invoke$arity$variadic","taoensso.timbre/set-level!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core.range.cljs$core$IFn$_invoke$arity$0","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/level>=","y","G__41284","G__41285","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","fexpr__41286","G__41288","taoensso.timbre/may-log?","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$3","?config","config","min-level","cljs.core.get.cljs$core$IFn$_invoke$arity$3","and__4174__auto__","G__41298","G__41299","G__41300","taoensso.timbre/str-join","xs","taoensso.encore.str_join.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","taoensso.encore/nil->str","cljs.core/record?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/next-vargs","v","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/vargs->margs","msg-type","vargs","vec__41301","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","auto-error?","G__41304","G__41305","taoensso.encore/kw-identical?","msg-fmt?","G__41306","G__41307","v0","taoensso.encore/error?","?msg-fmt","vec__41308","cljs.core/Delay","G__41311","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","taoensso.encore/format*","taoensso.truss.impl/-invar-violation!","?meta","cljs.core/map?","cljs.core/meta","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","vec__41312","G__41315","G__41317","taoensso.timbre/-log!","?file","vargs_","?base-data","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","callsite-id","cljs.core/deref","instant","taoensso.encore/now-dt","context","margs","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","fexpr__41318","cljs.core/hash","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","?data","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","mf","result","cljs.core/reduced","output-fn1","cljs.core/reduce-kv","_","id","appender","G__41319","G__41320","G__41321","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","G__41323","map__41324","async?","apfn","output-fn","G__41328","G__41329","output_","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","mfn","G__41331","taoensso.timbre.stacktrace.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre.may_log_QMARK_.cljs$core$IFn$_invoke$arity$2","taoensso.timbre/str-println","seq41332","self__4777__auto__","cljs.core/seq"]]],"~:cache-keys",["~#cmap",[["^3<","goog/dom/tagname.js"],[1579687410012,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^2Y","~$goog.dom.HtmlElement"]]],["^3<","goog/async/freelist.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/labs/useragent/platform.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.labs.userAgent.util","~$goog.string"]]],["^3<","goog/timer/timer.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.Promise","~$goog.events.EventTarget"]]],["^3<","cljs/tools/reader/impl/utils.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^2S","^3O"]]],["^3<","goog/math/math.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.array","~$goog.asserts"]]],["^3<","goog/html/trustedtypes.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/string/stringformat.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3O"]]],["^3<","goog/events/eventtype.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^3<","goog/labs/useragent/browser.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3N","~$goog.object","~$goog.string.internal"]]],["^3<","goog/html/safeurl.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3W"]]],["^3<","goog/array/array.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S"]]],["^3<","goog/useragent/useragent.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3N","~$goog.reflect","^3O"]]],["^3<","goog/structs/prioritypool.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^3<","goog/async/run.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^3<","taoensso/encore.cljs"],[1579687473255,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^2S","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","~$cljs.test","^3V","^3O","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^3<","goog/debug/error.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/async/workqueue.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.async.FreeList"]]],["^3<","goog/events/events.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^3T","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^3<","goog/promise/resolver.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/events/browserfeature.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3U"]]],["^3<","cljs/tools/reader/edn.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^3O","^4@"]]],["^3<","goog/structs/priorityqueue.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.structs.Heap"]]],["^3<","goog/net/xhrio.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.Timer","^3R","^3S","^4J","^3Q","~$goog.json.hybrid","~$goog.log","^4G","^4F","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^3V","^3O","^4E","~$goog.structs.Map","~$goog.uri.utils","^3U"]]],["^3<","goog/promise/thenable.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/dom/nodetype.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","cljs/tools/reader/impl/inspect.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X"]]],["^3<","cljs/pprint.cljs"],[1579687405264,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^2S","^3O","^4@"]]],["^3<","cljs/tools/reader.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^4O","^4P","^4Q","^4N","^3R","^3O","^4@"]]],["^3<","goog/net/wrapperxmlhttpfactory.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^3<","goog/events/eventtarget.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.Disposable","^3S","^4A","~$goog.events.Event","^4L","^4M","^3V"]]],["^3<","goog/disposable/disposable.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.disposable.IDisposable"]]],["^3<","goog/string/typedstring.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/object/object.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/dom/asserts.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S"]]],["^3<","goog/structs/set.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^4E","~$goog.structs.Collection","^4Y"]]],"~:SHADOW-TIMESTAMP",[1579687469000,1579687405000],["^3<","goog/math/long.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","^45"]]],["^3<","goog/events/listener.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.events.ListenableKey"]]],["^3<","goog/html/trustedresourceurl.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.html.trustedtypes","^3Z","^3[","^40","^41"]]],["^3<","goog/events/listenermap.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","~$goog.events.Listener","^3V"]]],["^3<","goog/events/eventid.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","taoensso/truss.cljs"],[1579687473542,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","~$taoensso.truss.impl"]]],["^3<","goog/string/internal.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/functions/functions.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/html/safestyle.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","~$goog.html.SafeUrl","^40","^41","^3W"]]],["^3<","goog/dom/safe.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^5:","^3Y","~$goog.html.uncheckedconversions","^40","^3W"]]],["^3<","taoensso/truss/impl.cljs"],[1579687473542,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^4;"]]],["^3<","goog/net/eventtype.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/structs/map.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^3<","goog/net/xhriopool.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^4B","~$goog.structs.PriorityPool"]]],["^3<","goog/html/safehtml.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","~$goog.dom.TagName","~$goog.dom.tags","^5>","^5?","~$goog.html.SafeStyleSheet","^5:","^3Y","^57","^3Z","^3[","^42","^3V","^40","^41","^3W"]]],["^3<","goog/dom/tags.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3V"]]],["^3<","goog/math/size.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/structs/queue.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R"]]],["^3<","goog/labs/useragent/engine.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3N","^3O"]]],["^3<","taoensso/timbre/appenders/core.cljs"],[1579687473239,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^2S","^F"]]],["^3<","cljs/reader.cljs"],[1579687405264,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^3V","^4R","^4=","^4@"]]],["^3<","goog/dom/dom.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^5D","~$goog.dom.safe","^5=","^5@","~$goog.math.Coordinate","~$goog.math.Size","^3V","^3O","~$goog.string.Unicode","^3U"]]],["^3<","goog/asserts/asserts.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.debug.Error","^5H"]]],["^3<","goog/debug/logbuffer.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.debug.LogRecord"]]],["^3<","goog/uri/uri.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","^3O","^4E","^4Y","^4Z","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^3<","goog/net/errorcode.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/i18n/bidi.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/disposable/idisposable.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/promise/promise.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.Thenable","^3S","^4I","~$goog.async.run","^4:","^5M","~$goog.promise.Resolver"]]],["^3<","goog/fs/url.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/debug/logrecord.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/base.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",[]]],["^3<","goog/json/hybrid.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.json"]]],["^3<","goog/structs/structs.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3V"]]],["^3<","cljs/tools/reader/impl/errors.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^4O","^2S","~$cljs.tools.reader.impl.inspect"]]],["^3<","clojure/string.cljs"],[1579687405264,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^3O","^4@"]]],["^3<","goog/structs/pool.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^51","~$goog.structs.Queue","~$goog.structs.Set"]]],["^3<","goog/net/httpstatus.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/structs/heap.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3V","~$goog.structs.Node"]]],["^3<","goog/debug/entrypointregistry.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S"]]],["^3<","goog/string/string.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^5I","^5@","^40","^3W"]]],["^3<","goog/reflect/reflect.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/labs/useragent/util.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3W"]]],["^3<","goog/debug/debug.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","~$goog.debug.errorcontext","^3U"]]],["^3<","goog/string/stringbuffer.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/math/coordinate.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","~$goog.math"]]],["^3<","goog/debug/errorcontext.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","cljs/tools/reader/reader_types.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^4P","^3O","^4@"]]],["^3<","goog/iter/iter.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","^5<","^5Z"]]],["^3<","goog/async/nexttick.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^4J","~$goog.dom","^5D","^5I","^5<","^5=","^3Y","^42","^43","^40"]]],["^3<","goog/html/uncheckedconversions.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","^5=","^5>","^5?","^5F","^5:","^3Y","^40","^3W"]]],["^3<","goog/debug/logger.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","~$goog.debug","~$goog.debug.LogBuffer","^5N"]]],["^3<","goog/events/event.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^51","~$goog.events.EventId"]]],["^3<","cljs/tools/reader/impl/commons.cljs"],[1579687401423,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^4N","^4O","^4P"]]],["^3<","goog/dom/htmlelement.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","cljs/core.cljs"],[1579687405264,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["~$goog.math.Long","~$goog.math.Integer","^3O","^3V","^3R","~$goog.Uri","^4@"]]],["^3<","goog/html/safescript.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","^57","^40","^41"]]],["^3<","goog/log/log.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^60","~$goog.debug.LogManager","^5N","~$goog.debug.Logger"]]],["^3<","goog/html/safestylesheet.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","^5?","^3V","^40","^41","^3W"]]],["^3<","goog/structs/collection.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/events/browserevent.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^60","^3T","^52","~$goog.events.EventType","^45","^3U"]]],["^3<","goog/math/integer.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^45"]]],["^3<","goog/structs/node.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/dom/browserfeature.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3U"]]],["^3<","clojure/set.cljs"],[1579687405264,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X"]]],["^3<","goog/uri/utils.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3R","^3S","^3O"]]],["^3<","goog/string/const.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","^41"]]],["^3<","taoensso/timbre.cljs"],[1579687473239,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^2S","^F","^2V"]]],["^3<","goog/json/json.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]],["^3<","goog/events/listenable.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^62"]]],["^3<","goog/net/xmlhttpfactory.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^4["]]],["^3<","goog/net/xmlhttp.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^3S","~$goog.net.WrapperXmlHttpFactory","^50"]]],["^3<","cljs/test.cljs"],[1579687405264,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y","^2X","^2S","~$cljs.pprint"]]],["^3<","goog/net/xhrlike.js"],[1579687410012,"^3I",["^ ","^3J",null,"^3K",["^I",[]],"^3L",["^2Y"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/timbre/4.7.4/timbre-4.7.4.jar!/taoensso/timbre/appenders/core.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/columns.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/timbre/4.7.4/timbre-4.7.4.jar!/taoensso/timbre.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/ansi.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/writer.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/exception.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/stacktrace.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/truss/1.3.5/truss-1.3.5.jar!/taoensso/truss.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/pprint.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer/api.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/template.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/test.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/test.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/reader.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/encore/2.79.1/encore-2.79.1.jar!/taoensso/encore.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/truss/1.3.5/truss-1.3.5.jar!/taoensso/truss/impl.clj",1579687473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Peter Taoussanis (@ptaoussanis)","^7","Simple, flexible logging for Clojure/Script. No XML.","^8","taoensso/timbre.cljs","^9",1,"^:",5,"^;",1,"^<",20],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",["^ ","^E","^F","^G","^F"],"^H",["^I",[]],"^J",["^ ","^K",["^ ","^L",["^M",[[]]],"^9",642,"^:",1,"^8","taoensso/timbre.clj","^N","^O","^P","^Q","^R",true],"^S",["^ ","^L",["^M",[["^T","~$&","^U"]]],"^9",591,"^:",1,"^8","taoensso/timbre.clj","^N","^V","^P","^Q","^R",true],"^W",["^ ","^L",["^M",[["^X","~$&","^Y"]]],"^9",560,"^:",1,"^8","taoensso/timbre.clj","^N","^Z","^P","^Q","^R",true],"^[",["^ ","^L",["^M",[["^X","~$&","^Y"]]],"^9",571,"^:",1,"^8","taoensso/timbre.clj","^N","^10","^P","^Q","^R",true],"^11",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",578,"^:",1,"^8","taoensso/timbre.clj","^N","^12","^P","^Q","^R",true],"^13",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",577,"^:",1,"^8","taoensso/timbre.clj","^N","^14","^P","^Q","^R",true],"^15",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",575,"^:",1,"^8","taoensso/timbre.clj","^N","^16","^P","^Q","^R",true],"^17",["^ ","^L",["^M",[["^X","^18","^Y","~$&",["^19"]]]],"^7","Core low-level log macro. Useful for tooling, etc.\n\n    * `level`    - must eval to a valid logging level\n    * `msg-type` - must eval to e/o #{:p :f nil}\n    * `opts`     - ks e/o #{:config :?err :?ns-str :?file :?line :?base-data}\n\n  Supports compile-time elision when compile-time const vals\n  provided for `level` and/or `?ns-str`.","^9",494,"^:",1,"^8","taoensso/timbre.clj","^N","^1:","^P","^Q","^R",true],"^1;",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",567,"^:",1,"^8","taoensso/timbre.clj","^N","^1<","^P","^Q","^R",true],"^1=",["^ ","^L",["^M",[["^T","^1>","^X","^1?","^1@"]]],"^9",624,"^:",1,"^8","taoensso/timbre.clj","^N","^1A","^P","^Q","^R",true],"^1B",["^ ","^L",["^M",[["~$&","^U"]]],"^9",675,"^:",1,"^8","taoensso/timbre.clj","^N","^1C","^P","^Q","^R",true],"^1D",["^ ","^L",["^M",[["^1>","^X","~$&","^Y"]]],"^9",570,"^:",1,"^8","taoensso/timbre.clj","^N","^1E","^P","^Q","^R",true],"^1F",["^ ","^L",["^M",[["^1@"],["^X","^1@"],["^X","^1?","^1@"],["^1>","^X","^1?","^1@"]]],"^7","Evaluates named expression and logs its result. Always returns the result.\n  Defaults to :debug logging level and unevaluated expression as name.","^9",634,"^:",1,"^8","taoensso/timbre.clj","^N","^1G","^P","^Q","^R",true],"^1H",["^ ","^L",["^M",[["^1I","~$&","^U"]]],"^7","Handy for sampled logging, etc.","^9",723,"^:",1,"^8","taoensso/timbre.clj","^N","^1J","^P","^Q","^R",true],"^1K",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",564,"^:",1,"^8","taoensso/timbre.clj","^N","^1L","^P","^Q","^R",true],"^1M",["^ ","^L",["^M",[["^X","~$&","^U"]]],"^9",150,"^:",1,"^8","taoensso/timbre.clj","^N","^1N","^P","^Q","^R",true],"^1O",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",561,"^:",1,"^8","taoensso/timbre.clj","^N","^1P","^P","^Q","^R",true],"^1Q",["^ ","^L",["^M",[["^T","~$&","^U"]]],"^9",585,"^:",1,"^8","taoensso/timbre.clj","^N","^1R","^P","^Q","^R",true],"^1S",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",562,"^:",1,"^8","taoensso/timbre.clj","^N","^1T","^P","^Q","^R",true],"^1U",["^ ","^L",["^M",[["^1>","^X","~$&","^Y"]]],"^9",559,"^:",1,"^8","taoensso/timbre.clj","^N","^1V","^P","^Q","^R",true],"^1W",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",573,"^:",1,"^8","taoensso/timbre.clj","^N","^1X","^P","^Q","^R",true],"^1Y",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",572,"^:",1,"^8","taoensso/timbre.clj","^N","^1Z","^P","^Q","^R",true],"^1[",["^ ","^L",["^M",[["^T","~$&","^U"]]],"^9",598,"^:",1,"^8","taoensso/timbre.clj","^N","^20","^P","^Q","^R",true],"^21",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",574,"^:",1,"^8","taoensso/timbre.clj","^N","^22","^P","^Q","^R",true],"^23",["^ ","^L",["^M",[["~$&","^U"]]],"^9",602,"^:",1,"^8","taoensso/timbre.clj","^N","^24","^P","^Q","^R",true],"^25",["^ ","^L",["^M",[[],["^X"],["^X","^1?"],["^1>","^X","^1?"]]],"^9",739,"^:",3,"^8","taoensso/timbre.clj","^N","^26","^P","^Q","^R",true],"^27",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",566,"^:",1,"^8","taoensso/timbre.clj","^N","^28","^P","^Q","^R",true],"^29",["^ ","^L",["^M",[["~$&","^U"]]],"^9",601,"^:",1,"^8","taoensso/timbre.clj","^N","^2:","^P","^Q","^R",true],"^2;",["^ ","^L",["^M",[["^1>","~$&","^U"]]],"^9",737,"^:",3,"^8","taoensso/timbre.clj","^N","^2<","^P","^Q","^R",true],"^2=",["^ ","^L",["^M",[["^1>","~$&","^U"]]],"^9",139,"^:",1,"^8","taoensso/timbre.clj","^N","^2>","^P","^Q","^R",true],"^2?",["^ ","^L",["^M",[["^2@","~$&","^U"]]],"^9",284,"^:",1,"^8","taoensso/timbre.clj","^N","^2A","^P","^Q","^R",true],"^2B",["^ ","^L",["^M",[["~$&","^U"]]],"^9",600,"^:",1,"^8","taoensso/timbre.clj","^N","^2C","^P","^Q","^R",true],"^2D",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",576,"^:",1,"^8","taoensso/timbre.clj","^N","^2E","^P","^Q","^R",true],"^2F",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",563,"^:",1,"^8","taoensso/timbre.clj","^N","^2G","^P","^Q","^R",true],"^2H",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",738,"^:",3,"^8","taoensso/timbre.clj","^N","^2I","^P","^Q","^R",true],"^2J",["^ ","^L",["^M",[["^1>","~$&","^U"]]],"^9",138,"^:",1,"^8","taoensso/timbre.clj","^N","^2K","^P","^Q","^R",true],"^2L",["^ ","^L",["^M",[["~$&","^Y"]]],"^9",565,"^:",1,"^8","taoensso/timbre.clj","^N","^2M","^P","^Q","^R",true],"^2N",["^ ","^L",["^M",[["^X","~$&","^U"]]],"^9",736,"^:",3,"^8","taoensso/timbre.clj","^N","^2O","^P","^Q","^R",true]],"^N","^Q","^2Q",null,"^2R",["^ ","^2S","^2S","^2T","^2S","^F","^F","^2U","^F","^2V","^2V","^2W","^2V","^2X","^2X","^2Y","^2Y"],"^2Z",["^I",["^2[","^30"]],"~:shadow/js-access-global",["^I",["Error"]],"^31",null,"~:defs",["^ ","~$get-rate-limiter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",272,"^:",20,"^;",272,"^<",36,"~:private",true],"^7?",true,"^N","~$taoensso.timbre/get-rate-limiter","^8","taoensso/timbre.cljs","^<",36,"^:",1,"^9",272,"^;",272,"~:tag","~$function"],"~$next-vargs",["^ ","~:protocol-inline",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",287,"^:",10,"^;",287,"^<",20,"^7?",true,"^L",["^M",["~$quote",["^M",[["~$v"]]]]]],"^7?",true,"^N","~$taoensso.timbre/next-vargs","^8","taoensso/timbre.cljs","^<",20,"~:method-params",["^M",[["~$v"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^:",1,"~:variadic?",false,"^9",287,"~:ret-tag",["^I",["~$cljs.core/IVector","~$any"]],"^;",287,"~:max-fixed-arity",1,"~:fn-var",true,"^L",["^M",["^7E",["^M",[["~$v"]]]]]],"~$logging-enabled?",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",734,"^:",9,"^;",734,"^<",25,"^L",["^M",["^7E",["^M",[["^X","~$compile-time-ns"]]]]]],"^N","~$taoensso.timbre/logging-enabled?","^8","taoensso/timbre.cljs","^<",25,"^7G",["^M",[["^X","^7Q"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",3,"^7J",false,"^9",734,"^7K","~$boolean","^;",734,"^7N",2,"^7O",true,"^L",["^M",["^7E",["^M",[["^X","^7Q"]]]]]],"~$-levels-map",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",161,"^:",14,"^;",161,"^<",25,"~:const",true],"^N","~$taoensso.timbre/-levels-map","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^7U",true,"^9",161,"^;",161,"^7A","~$clj"],"~$valid-level",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",164,"^:",7,"^;",164,"^<",18,"^L",["^M",["^7E",["^M",[["~$x"]]]]]],"^N","~$taoensso.timbre/valid-level","^8","taoensso/timbre.cljs","^<",18,"^7G",["^M",[["~$x"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",164,"^7K","^7M","^;",164,"^7N",1,"^7O",true,"^L",["^M",["^7E",["^M",[["~$x"]]]]]],"~$merge-config!",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",147,"^:",7,"^;",147,"^<",20,"^L",["^M",["^7E",["^M",[["~$m"]]]]]],"^N","~$taoensso.timbre/merge-config!","^8","taoensso/timbre.cljs","^<",20,"^7G",["^M",[["~$m"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",147,"^7K","^7M","^;",147,"^7N",1,"^7O",true,"^L",["^M",["^7E",["^M",[["~$m"]]]]]],"~$-levels-set",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",160,"^:",14,"^;",160,"^<",25,"^7U",true],"^N","~$taoensso.timbre/-levels-set","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^7U",true,"^9",160,"^;",160,"^7A",["^I",["^7W","^7M","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]]],"~$log?",["^ ","^N","~$taoensso.timbre/log?","^8","taoensso/timbre.cljs","^9",733,"^:",3,"^;",733,"^<",12,"^5",["^ ","^8","taoensso/timbre.cljs","^9",733,"^:",8,"^;",733,"^<",12],"^7A","^7S"],"~$str-join",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",250,"^:",10,"^;",250,"^<",18,"^7?",true,"^L",["^M",["^7E",["^M",[["~$xs"]]]]]],"^7?",true,"^N","~$taoensso.timbre/str-join","^8","taoensso/timbre.cljs","^<",18,"^7G",["^M",[["^88"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",3,"^7J",false,"^9",250,"^7K",["^I",["^7M","~$string"]],"^;",250,"^7N",1,"^7O",true,"^L",["^M",["^7E",["^M",[["^88"]]]]]],"~$*config*",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",137,"^:",24,"^;",137,"^<",32,"~:dynamic",true,"^7","See `example-config` for info."],"^N","~$taoensso.timbre/*config*","^8","taoensso/timbre.cljs","^<",32,"^:",1,"^8<",true,"^9",137,"^;",137,"^7A","^7M","^7","See `example-config` for info."],"~$*context*",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",279,"^:",16,"^;",279,"^<",25,"^8<",true],"^N","~$taoensso.timbre/*context*","^8","taoensso/timbre.cljs","^<",25,"^:",1,"^8<",true,"^9",279,"^;",279,"^7A","^7M","^7","General-purpose dynamic logging context. Context will be included in\n  appender data map at logging time."],"~$valid-level?",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",163,"^:",7,"^;",163,"^<",19,"^L",["^M",["^7E",["^M",[["~$x"]]]]]],"^N","~$taoensso.timbre/valid-level?","^8","taoensso/timbre.cljs","^<",19,"^7G",["^M",[["~$x"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",163,"^7K","^7S","^;",163,"^7N",1,"^7O",true,"^L",["^M",["^7E",["^M",[["~$x"]]]]]],"~$-log!",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",338,"^:",7,"^;",338,"^<",12,"^L",["^M",["^7E",["^M",[["^1>","^X","~$?ns-str","~$?file","^T","^18","~$?err","~$vargs_","~$?base-data"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","~$callsite-id"]]]]],"^7","Core low-level log fn. Implementation detail!","~:top-fn",["^ ","^7J",false,"~:fixed-arity",10,"^7N",10,"^7G",["^M",[["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","^8H"]]],"^L",["^M",[["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","^8H"]]],"^7I",["^M",[null,null]]]],"^N","~$taoensso.timbre/-log!","^8","taoensso/timbre.cljs","^<",12,"^8I",["^ ","^7J",false,"^8J",10,"^7N",10,"^7G",["^M",[["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","^8H"]]],"^L",["^M",[["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","^8H"]]],"^7I",["^M",[null,null]]],"^7G",["^M",[["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","^8H"]]],"^7H",null,"^8J",10,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"~:methods",[["^ ","^8J",9,"^7J",false,"^7A","^7M"],["^ ","^8J",10,"^7J",false,"^7A","^84"]],"^9",338,"^;",338,"^7N",10,"^7O",true,"^L",["^M",[["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G"],["^1>","^X","^8C","^8D","^T","^18","^8E","^8F","^8G","^8H"]]],"^7","Core low-level log fn. Implementation detail!"],"~$console-appender",["^ ","^N","~$taoensso.timbre/console-appender","^8","taoensso/timbre.cljs","^9",58,"^:",8,"^;",58,"^<",29,"^5",["^ ","^8","taoensso/timbre.cljs","^9",58,"^:",13,"^;",58,"^<",29]],"~$default-err",["^ ","^N","~$taoensso.timbre/default-err","^8","taoensso/timbre.cljs","^9",54,"^:",1,"^;",54,"^<",21,"~:declared",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",54,"^:",10,"^;",54,"^<",21,"^8Q",true]],"~$example-config",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",60,"^:",6,"^;",60,"^<",20],"^N","~$taoensso.timbre/example-config","^8","taoensso/timbre.cljs","^<",20,"^:",1,"^9",60,"^;",60,"^7A","~$cljs.core/IMap","^7","Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _}\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :middleware-fn   ; Optional, stacks with active config's middleware\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`."],"~$may-log?",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^<",46,"^8I",["^ ","^7J",false,"^8J",3,"^7N",3,"^7G",["^M",[["^X"],["^X","^8C"],["^X","^8C","~$?config"]]],"^L",["^M",[["^X"],["^X","^8C"],["^X","^8C","^8V"]]],"^7I",["^M",[null,null,null]]],"^:",38,"^9",226,"^;",226,"^7A","^7S","^L",["^M",["^7E",["^M",[["^X"],["^X","^8C"],["^X","^8C","^8V"]]]]],"^7","Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"],"^N","~$taoensso.timbre/may-log?","^8","taoensso/timbre.cljs","^<",46,"^8I",["^ ","^7J",false,"^8J",3,"^7N",3,"^7G",["^M",[["^X"],["^X","^8C"],["^X","^8C","^8V"]]],"^L",["^M",[["^X"],["^X","^8C"],["^X","^8C","^8V"]]],"^7I",["^M",[null,null,null]]],"^7G",["^M",[["^X"],["^X","^8C"],["^X","^8C","^8V"]]],"^7H",null,"^8J",3,"^7I",["^M",[null,null,null]],"^:",1,"^7J",false,"^8L",[["^ ","^8J",1,"^7J",false,"^7A","^7S"],["^ ","^8J",2,"^7J",false,"^7A","^7S"],["^ ","^8J",3,"^7J",false,"^7A",["^I",["^7S","^7M"]]]],"^9",226,"^7K","^7S","^;",226,"^7N",3,"^7A","^7S","^7O",true,"^L",["^M",[["^X"],["^X","^8C"],["^X","^8C","^8V"]]],"^7","Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config"],"~$level>=",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",168,"^:",7,"^;",168,"^<",14,"^L",["^M",["^7E",["^M",[["~$x","~$y"]]]]]],"^N","~$taoensso.timbre/level>=","^8","taoensso/timbre.cljs","^<",14,"^7G",["^M",[["~$x","~$y"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",168,"^7K","^7S","^;",168,"^7N",2,"^7O",true,"^L",["^M",["^7E",["^M",[["~$x","~$y"]]]]]],"~$set-config!",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",146,"^:",9,"^;",146,"^<",20,"^L",["^M",["^7E",["^M",[["~$m"]]]]]],"^N","~$taoensso.timbre/set-config!","^8","taoensso/timbre.cljs","^<",20,"^7G",["^M",[["~$m"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",146,"^7K","^7M","^;",146,"^7N",1,"^7O",true,"^L",["^M",["^7E",["^M",[["~$m"]]]]]],"~$-levels-vec",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",159,"^:",14,"^;",159,"^<",25,"^7U",true],"^N","~$taoensso.timbre/-levels-vec","^8","taoensso/timbre.cljs","^<",25,"~:const-expr",["^ ","^2P","~:vector","~:env",["^ ","~:context","~:expr"],"^33",["~:trace","~:debug","~:info","~:warn","~:error","~:fatal","~:report"],"~:items",[["^ ","^2P","^7U","~:val","^97","^94",["^ ","^95","^96"],"^33","^97","^7A","~$cljs.core/Keyword"],["^ ","^2P","^7U","^9?","^98","^94",["^ ","^95","^96"],"^33","^98","^7A","^9@"],["^ ","^2P","^7U","^9?","^99","^94",["^ ","^95","^96"],"^33","^99","^7A","^9@"],["^ ","^2P","^7U","^9?","^9:","^94",["^ ","^95","^96"],"^33","^9:","^7A","^9@"],["^ ","^2P","^7U","^9?","^9;","^94",["^ ","^95","^96"],"^33","^9;","^7A","^9@"],["^ ","^2P","^7U","^9?","^9<","^94",["^ ","^95","^96"],"^33","^9<","^7A","^9@"],["^ ","^2P","^7U","^9?","^9=","^94",["^ ","^95","^96"],"^33","^9=","^7A","^9@"]],"~:children",["^9>"],"^7A","^7L"],"^:",1,"^7U",true,"^9",159,"^;",159,"^7A","^7L"],"~$swap-config!",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",142,"^:",7,"^;",142,"^<",19,"^L",["^M",["^7E",["^M",[["~$f","~$&","^Y"]]]]],"^8I",["^ ","^7J",true,"^8J",1,"^7N",1,"^7G",[["^M",["~$f","^Y"]]],"^L",["^M",[["~$f","~$&","^Y"]]],"^7I",["^M",[null]]]],"^N","~$taoensso.timbre/swap-config!","^8","taoensso/timbre.cljs","^<",19,"^8I",["^ ","^7J",true,"^8J",1,"^7N",1,"^7G",[["^M",["~$f","^Y"]]],"^L",["^M",[["~$f","~$&","^Y"]]],"^7I",["^M",[null]]],"^7G",[["^M",["~$f","^Y"]]],"^7H",null,"^8J",1,"^7I",["^M",[null]],"^:",1,"^7J",true,"^8L",[["^ ","^8J",1,"^7J",true]],"^9",142,"^7K","^7M","^;",142,"^7N",1,"^7O",true,"^L",["^M",[["~$f","~$&","^Y"]]]],"~$console-?appender",["^ ","^N","~$taoensso.timbre/console-?appender","^8","taoensso/timbre.cljs","^9",731,"^:",10,"^;",731,"^<",32,"^5",["^ ","^8","taoensso/timbre.cljs","^9",731,"^:",15,"^;",731,"^<",32]],"~$str-println",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",735,"^:",9,"^;",735,"^<",20,"^L",["^M",["^7E",["^M",[["~$&","^88"]]]]],"^8I",["^ ","^7J",true,"^8J",0,"^7N",0,"^7G",[["^M",["^88"]]],"^L",["^M",[["~$&","^88"]]],"^7I",["^M",[null]]]],"^N","~$taoensso.timbre/str-println","^8","taoensso/timbre.cljs","^<",20,"^8I",["^ ","^7J",true,"^8J",0,"^7N",0,"^7G",[["^M",["^88"]]],"^L",["^M",[["~$&","^88"]]],"^7I",["^M",[null]]],"^7G",[["^M",["^88"]]],"^7H",null,"^8J",0,"^7I",["^M",[null]],"^:",3,"^7J",true,"^8L",[["^ ","^8J",0,"^7J",true,"^7A",["^I",["^7M","^8:"]]]],"^9",735,"^7K","^7M","^;",735,"^7N",0,"^7O",true,"^L",["^M",[["~$&","^88"]]]],"~$set-level!",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",149,"^:",11,"^;",149,"^<",21,"^L",["^M",["^7E",["^M",[["^X"]]]]]],"^N","~$taoensso.timbre/set-level!","^8","taoensso/timbre.cljs","^<",21,"^7G",["^M",[["^X"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",149,"^7K","^7M","^;",149,"^7N",1,"^7O",true,"^L",["^M",["^7E",["^M",[["^X"]]]]]],"~$vargs->margs",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",288,"^:",8,"^;",288,"^<",20,"^7?",true,"^L",["^M",["^7E",["^M",[["^8E","^18","~$vargs"]]]]],"^7","Transforms raw vargs -> {:?err _ :?meta _ ...}, extracting:\n  * Special error or ^:meta {} (experimental, undocumented) v0\n  * Message format string\n  * Message string delay"],"^7?",true,"^N","~$taoensso.timbre/vargs->margs","^8","taoensso/timbre.cljs","^<",20,"^7G",["^M",[["^8E","^18","^9K"]]],"^7H",null,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^9",288,"^7K","^8T","^;",288,"^7N",3,"^7O",true,"^L",["^M",["^7E",["^M",[["^8E","^18","^9K"]]]]],"^7","Transforms raw vargs -> {:?err _ :?meta _ ...}, extracting:\n  * Special error or ^:meta {} (experimental, undocumented) v0\n  * Message format string\n  * Message string delay"],"~$default-output-fn",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",35,"^:",7,"^;",35,"^<",24,"^L",["^M",["^7E",["^M",[["~$data"],["^19","^9N"]]]]],"^7","Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.","^8I",["^ ","^7J",false,"^8J",2,"^7N",2,"^7G",["^M",[["^9N"],["^19","^9N"]]],"^L",["^M",[["^9N"],["^19","^9N"]]],"^7I",["^M",[null,null]]]],"^N","~$taoensso.timbre/default-output-fn","^8","taoensso/timbre.cljs","^<",24,"^8I",["^ ","^7J",false,"^8J",2,"^7N",2,"^7G",["^M",[["^9N"],["^19","^9N"]]],"^L",["^M",[["^9N"],["^19","^9N"]]],"^7I",["^M",[null,null]]],"^7G",["^M",[["^9N"],["^19","^9N"]]],"^7H",null,"^8J",2,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^8L",[["^ ","^8J",1,"^7J",false,"^7A","^7M"],["^ ","^8J",2,"^7J",false,"^7A","^8:"]],"^9",35,"^;",35,"^7N",2,"^7O",true,"^L",["^M",[["^9N"],["^19","^9N"]]],"^7","Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts."],"~$default-out",["^ ","^N","~$taoensso.timbre/default-out","^8","taoensso/timbre.cljs","^9",54,"^:",1,"^;",54,"^<",33,"^8Q",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",54,"^:",22,"^;",54,"^<",33,"^8Q",true]],"~$ns-filter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",177,"^:",25,"^;",177,"^<",34,"^7?",true],"^7?",true,"^N","~$taoensso.timbre/ns-filter","^8","taoensso/timbre.cljs","^<",34,"^:",1,"^9",177,"^;",177,"^7A","^7B","^7","Returns true iff given ns passes white/black lists."],"~$println-appender",["^ ","^N","~$taoensso.timbre/println-appender","^8","taoensso/timbre.cljs","^9",57,"^:",8,"^;",57,"^<",29,"^5",["^ ","^8","taoensso/timbre.cljs","^9",57,"^:",13,"^;",57,"^<",29]],"~$ordered-levels",["^ ","^N","~$taoensso.timbre/ordered-levels","^8","taoensso/timbre.cljs","^9",732,"^:",3,"^;",732,"^<",22,"^5",["^ ","^8","taoensso/timbre.cljs","^9",732,"^:",8,"^;",732,"^<",22],"^7A","^7L"],"~$-compile-ns-filter",["^ ","^5",["^ ","^8","taoensso/timbre.cljs","^9",176,"^:",16,"^;",176,"^<",34,"^7?",true],"^7?",true,"^N","~$taoensso.timbre/-compile-ns-filter","^8","taoensso/timbre.cljs","^<",34,"^:",1,"^9",176,"^;",176,"^7A","^7B"],"~$get-hostname",["^ ","^N","~$taoensso.timbre/get-hostname","^8","taoensso/timbre.cljs","^9",247,"^:",1,"^;",247,"^<",22,"^8Q",true,"^5",["^ ","^8","taoensso/timbre.cljs","^9",247,"^:",10,"^;",247,"^<",22,"^8Q",true]],"~$stacktrace",["^ ","^7D",null,"^5",["^ ","^8","taoensso/timbre.cljs","^9",703,"^:",7,"^;",703,"^<",17,"^L",["^M",["^7E",["^M",[["~$err"],["^:1","^19"]]]]],"^8I",["^ ","^7J",false,"^8J",2,"^7N",2,"^7G",["^M",[["^:1"],["^:1","^19"]]],"^L",["^M",[["^:1"],["^:1","^19"]]],"^7I",["^M",[null,null]]]],"^N","~$taoensso.timbre/stacktrace","^8","taoensso/timbre.cljs","^<",17,"^8I",["^ ","^7J",false,"^8J",2,"^7N",2,"^7G",["^M",[["^:1"],["^:1","^19"]]],"^L",["^M",[["^:1"],["^:1","^19"]]],"^7I",["^M",[null,null]]],"^7G",["^M",[["^:1"],["^:1","^19"]]],"^7H",null,"^8J",2,"^7I",["^M",[null,null]],"^:",1,"^7J",false,"^8L",[["^ ","^8J",1,"^7J",false,"^7A","^7M"],["^ ","^8J",2,"^7J",false,"^7A","^8:"]],"^9",703,"^;",703,"^7N",2,"^7O",true,"^L",["^M",[["^:1"],["^:1","^19"]]]]],"^30",["^ ","^F","^F","^2U","^F","^Q","^Q","^32","^Q","^2X","^2X"],"~:cljs.analyzer/constants",["^ ","^2Z",["^I",["~:given","~:ns-whitelist","~:inherit","^9=","~:fn","~:hash","^5","~:hash_","~:ns-blacklist","~:instant","~:rate-limit","~:else","~:config","~:vargs","~:output_","~:msg_","~:middleware-fn","^9:","^97","~:err","~:?file","^98","~:hostname_","~:error-level?","~:appender","~:appender-id","~:?ns-str","~:enabled?","~:middleware","^9<","~:level","~:output-fn","~:?err","~:vargs_","^99","~:stacktrace-fonts","~:no-stacktrace?","~:timestamp_","^95","~:?line","~:min-level","~:f","^9;","~:console","~:?err_","~:?meta","~:auto","~:p","~:?msg-fmt","~:async?","~:appenders"]],"~:order",["^:Q","^:P","^:L","^:N","^:A","^:I","^:E","^:R","^:S","^:5","^::","^:K","^:M","^:[","^98","^:U","^97","^99","^9:","^9;","^9<","^9=","^:4","^:=","^:X","~:f","~:p","^:W","^:Y","^:?","^5","^:C","^:9","^:;","^:>","^:D","^:F","^:O","^95","^:V","^:8","^:J","^:T","^:<","^:7","^:Z","^:6","^:H","^:G","^:@","^:B"]],"^38",["^ ","^2[",["^I",[]],"^30",["^I",[]]],"^39",["^ "],"^3:",["^2Y","^2X","^2S","^F","^2V"]],"^P","^Q","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^3H",[["^;3","~:static-fns"],true,["^;3","~:shadow-tweaks"],null,["^;3","~:elide-asserts"],false,["^;3","~:optimize-constants"],null,["^;3","^3?"],null,["^;3","~:external-config"],null,["^;3","~:tooling-config"],null,["^;3","~:emit-constants"],null,["^;3","~:load-tests"],null,["^;3","~:form-size-threshold"],null,["^;3","~:infer-externs"],"^:X",["^;3","^3A"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;3","~:fn-invoke-direct"],null,["^;3","~:source-map"],"/dev/null"]]]