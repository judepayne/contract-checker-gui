["^ ","~:output",["^ ","~:js","goog.provide('kvlt.middleware');\r\ngoog.require('cljs.core');\r\ngoog.require('cljs.reader');\r\ngoog.require('kvlt.middleware.util');\r\ngoog.require('kvlt.util');\r\ngoog.require('kvlt.platform.util');\r\ngoog.require('clojure.set');\r\ngoog.require('clojure.walk');\r\ngoog.require('clojure.string');\r\ngoog.require('cats.core');\r\nkvlt.middleware.header = (function kvlt$middleware$header(var_args){\r\nvar G__46766 = arguments.length;\r\nswitch (G__46766) {\r\ncase 2:\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2 = (function (p__46767,k){\r\nvar map__46768 = p__46767;\r\nvar map__46768__$1 = (((((!((map__46768 == null))))?(((((map__46768.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46768.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46768):map__46768);\r\nvar resp = map__46768__$1;\r\nvar hs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46768__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\r\nvar and__4174__auto__ = hs;\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn cljs.core.some(hs,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.name(k)], null));\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n}));\r\n\r\n(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3 = (function (m,k,v){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(m,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),(function (h){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(h,k,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.name(k)], 0)),cljs.core.name(k),v);\r\n}));\r\n}));\r\n\r\n(kvlt.middleware.header.cljs$lang$maxFixedArity = 3);\r\n\r\nkvlt.middleware.body__GT_string = (function kvlt$middleware$body__GT_string(p__46785){\r\nvar map__46786 = p__46785;\r\nvar map__46786__$1 = (((((!((map__46786 == null))))?(((((map__46786.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46786.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46786):map__46786);\r\nvar resp = map__46786__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46786__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nreturn kvlt.platform.util.byte_array__GT_str(body,kvlt.middleware.util.charset(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634))));\r\n});\r\nif((typeof kvlt !== 'undefined') && (typeof kvlt.middleware !== 'undefined') && (typeof kvlt.middleware.from_content_type !== 'undefined')){\r\n} else {\r\n/**\r\n * Used by [[as]] to transform an incoming response.  Dispatches on\r\n *   `:content-type`' header, as a namespace-qualified\r\n *   keyword (e.g. `:application/edn`).  The input and output are the\r\n *   top-level response map, not only the response body.\r\n * \r\n *   The default implementation (i.e. unrecognized content-type) returns\r\n *   the response map unmodified.\r\n */\r\nkvlt.middleware.from_content_type = (function (){var method_table__4672__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar prefer_table__4673__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar method_cache__4674__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar cached_hierarchy__4675__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar hierarchy__4676__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__46796 = cljs.core.get_global_hierarchy;\r\nreturn (fexpr__46796.cljs$core$IFn$_invoke$arity$0 ? fexpr__46796.cljs$core$IFn$_invoke$arity$0() : fexpr__46796.call(null));\r\n})());\r\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"kvlt.middleware\",\"from-content-type\"),(function (resp){\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634))));\r\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4676__auto__,method_table__4672__auto__,prefer_table__4673__auto__,method_cache__4674__auto__,cached_hierarchy__4675__auto__));\r\n})();\r\n}\r\nkvlt.middleware.from_content_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (resp){\r\nreturn resp;\r\n}));\r\nkvlt.middleware.from_content_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"application\",\"edn\",\"application/edn\",-63927515),(function (resp){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.body__GT_string(resp)));\r\n}));\r\nkvlt.middleware.from_content_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"application\",\"json\",\"application/json\",1747896298),(function (p__46802){\r\nvar map__46803 = p__46802;\r\nvar map__46803__$1 = (((((!((map__46803 == null))))?(((((map__46803.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46803.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46803):map__46803);\r\nvar resp = map__46803__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46803__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),kvlt.platform.util.parse_json(kvlt.middleware.body__GT_string(resp)));\r\n}));\r\nkvlt.middleware.hint__GT_body_type = (function kvlt$middleware$hint__GT_body_type(x){\r\nif((((x instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"kvlt.body\",cljs.core.namespace(x))))){\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(x));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\r\n *   the request's `:type` and `:form-params` keys\r\n *   accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\r\n */\r\nkvlt.middleware.body_type_hint = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"body-type-hint\",\"body-type-hint\",-939145957),cljs.core.with_meta((function (p__46811){\r\nvar map__46812 = p__46811;\r\nvar map__46812__$1 = (((((!((map__46812 == null))))?(((((map__46812.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46812.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46812):map__46812);\r\nvar req = map__46812__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46812__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nvar temp__5733__auto__ = cljs.core.some(kvlt.middleware.hint__GT_body_type,cljs.core.keys(cljs.core.meta(body)));\r\nif(cljs.core.truth_(temp__5733__auto__)){\r\nvar t = temp__5733__auto__;\r\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(req,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(t),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"form-params\",\"form-params\",1884296467),body], 0)),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\n} else {\r\nreturn req;\r\n}\r\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.body_type_hint;},new cljs.core.Symbol(\"kvlt.middleware\",\"body-type-hint\",\"kvlt.middleware/body-type-hint\",-789443311,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"body-type-hint\",\"body-type-hint\",701385570,null),\"kvlt/middleware.cljc\",22,1,48,48,cljs.core.List.EMPTY,\"Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\\n  the request's `:type` and `:form-params` keys\\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\",(cljs.core.truth_(kvlt.middleware.body_type_hint)?kvlt.middleware.body_type_hint.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"post\",\"post\",269697687),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(3)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"kvlt.body\",\"edn\",\"kvlt.body/edn\",1136261434),true], null))], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"post\",\"post\",269697687),new cljs.core.Keyword(null,\"form-params\",\"form-params\",1884296467),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(3)], null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"edn\",\"edn\",1317840885)], null)], null)));\r\n/**\r\n * Turn request's `:content-type` (or `:type`), if any, and\r\n * `:character-encoding`, if any, into a \"content-type\" header & leave\r\n * top-level `:content-type` key in place. \r\n */\r\nkvlt.middleware.content_type = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),(function (p__46820){\r\nvar map__46821 = p__46820;\r\nvar map__46821__$1 = (((((!((map__46821 == null))))?(((((map__46821.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46821.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46821):map__46821);\r\nvar req = map__46821__$1;\r\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46821__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46821__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nvar character_encoding = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46821__$1,new cljs.core.Keyword(null,\"character-encoding\",\"character-encoding\",-1946080777));\r\nvar map__46837 = (function (){var G__46838 = req;\r\nif(cljs.core.truth_(type)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__46838,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),type);\r\n} else {\r\nreturn G__46838;\r\n}\r\n})();\r\nvar map__46837__$1 = (((((!((map__46837 == null))))?(((((map__46837.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46837.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46837):map__46837);\r\nvar req__$1 = map__46837__$1;\r\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46837__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\r\nvar G__46842 = req__$1;\r\nif(cljs.core.truth_(content_type)){\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(G__46842,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$2(content_type,character_encoding));\r\n} else {\r\nreturn G__46842;\r\n}\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.content_type;},new cljs.core.Symbol(\"kvlt.middleware\",\"content-type\",\"kvlt.middleware/content-type\",-400988246,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"content-type\",\"content-type\",1132308893,null),\"kvlt/middleware.cljc\",20,1,67,67,cljs.core.List.EMPTY,\"Turn request's `:content-type` (or `:type`), if any, and\\n   `:character-encoding`, if any, into a \\\"content-type\\\" header & leave\\n   top-level `:content-type` key in place. \",(cljs.core.truth_(kvlt.middleware.content_type)?kvlt.middleware.content_type.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"text/html\",new cljs.core.Keyword(null,\"character-encoding\",\"character-encoding\",-1946080777),\"US-ASCII\"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"text/html; charset=US-ASCII\"], null),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),\"text/html\"], null)], null)));\r\n/**\r\n * Turn request's `:accept` value, if any, into an \"accept\" header &\r\n *   remove the top-level key.\r\n */\r\nkvlt.middleware.accept = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),cljs.core.with_meta((function (p__46848){\r\nvar map__46850 = p__46848;\r\nvar map__46850__$1 = (((((!((map__46850 == null))))?(((((map__46850.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46850.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46850):map__46850);\r\nvar req = map__46850__$1;\r\nvar accept = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46850__$1,new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431));\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1(accept));\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.accept;},new cljs.core.Symbol(\"kvlt.middleware\",\"accept\",\"kvlt.middleware/accept\",2047916971,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"accept\",\"accept\",-780305338,null),\"kvlt/middleware.cljc\",14,1,86,86,cljs.core.List.EMPTY,\"Turn request's `:accept` value, if any, into an \\\"accept\\\" header &\\n  remove the top-level key.\",(cljs.core.truth_(kvlt.middleware.accept)?kvlt.middleware.accept.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept\",\"accept\",1874130431),new cljs.core.Keyword(null,\"edn\",\"edn\",1317840885)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [\"accept\",\"application/edn\"], null)], null)], null)));\r\nkvlt.middleware.as_key = (function kvlt$middleware$as_key(resp){\r\nreturn new cljs.core.Keyword(null,\"as\",\"as\",1148689641).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"kvlt\",\"request\",\"kvlt/request\",1769844894).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(resp)));\r\n});\r\nif((typeof kvlt !== 'undefined') && (typeof kvlt.middleware !== 'undefined') && (typeof kvlt.middleware.as_type !== 'undefined')){\r\n} else {\r\nkvlt.middleware.as_type = (function (){var method_table__4672__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar prefer_table__4673__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar method_cache__4674__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar cached_hierarchy__4675__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar hierarchy__4676__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__46856 = cljs.core.get_global_hierarchy;\r\nreturn (fexpr__46856.cljs$core$IFn$_invoke$arity$0 ? fexpr__46856.cljs$core$IFn$_invoke$arity$0() : fexpr__46856.call(null));\r\n})());\r\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"kvlt.middleware\",\"as-type\"),kvlt.middleware.as_key,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4676__auto__,method_table__4672__auto__,prefer_table__4673__auto__,method_cache__4674__auto__,cached_hierarchy__4675__auto__));\r\n})();\r\n}\r\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),(function (p__46860){\r\nvar map__46861 = p__46860;\r\nvar map__46861__$1 = (((((!((map__46861 == null))))?(((((map__46861.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46861.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46861):map__46861);\r\nvar resp = map__46861__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46861__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nreturn resp;\r\n}));\r\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"byte-array\",\"byte-array\",369158537),(function (p__46863){\r\nvar map__46864 = p__46863;\r\nvar map__46864__$1 = (((((!((map__46864 == null))))?(((((map__46864.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46864.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46864):map__46864);\r\nvar resp = map__46864__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46864__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nif(kvlt.platform.util.byte_array_QMARK_(body)){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"For platform-specific reasons, :as :byte-array is special-cased in\\n  kvlt.platform.http/request\",\"\\n\",\"(platform.util/byte-array? body)\"].join('')));\r\n}\r\n\r\nreturn resp;\r\n}));\r\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(function (resp){\r\nreturn (kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1(resp) : kvlt.middleware.from_content_type.call(null,resp));\r\n}));\r\nkvlt.middleware.as_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (p__46879){\r\nvar map__46880 = p__46879;\r\nvar map__46880__$1 = (((((!((map__46880 == null))))?(((((map__46880.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46880.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46880):map__46880);\r\nvar resp = map__46880__$1;\r\nvar headers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46880__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\r\nvar t = kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\r\nvar resp__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"orig-content-type\",\"orig-content-type\",-995245643),t);\r\nvar G__46882 = kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(resp__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1(kvlt.middleware.as_key(resp__$1)));\r\nreturn (kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.from_content_type.cljs$core$IFn$_invoke$arity$1(G__46882) : kvlt.middleware.from_content_type.call(null,G__46882));\r\n}));\r\nkvlt.middleware.parsing_error = (function kvlt$middleware$parsing_error(resp,e){\r\nvar error = kvlt.platform.util.exception__GT_map.cljs$core$IFn$_invoke$arity$variadic(e,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"middleware-error\",\"middleware-error\",873820682),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"middleware-error\",\"middleware-error\",873820682)], null)], 0));\r\nvar G__46883 = resp;\r\nif(cljs.core.not((function (){var G__46884 = new cljs.core.Keyword(null,\"error\",\"error\",-978969032);\r\nreturn (resp.cljs$core$IFn$_invoke$arity$1 ? resp.cljs$core$IFn$_invoke$arity$1(G__46884) : resp.call(null,G__46884));\r\n})())){\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([G__46883,error], 0));\r\n} else {\r\nreturn G__46883;\r\n}\r\n});\r\n/**\r\n * Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\r\n * \r\n *   See [[from-content-type]] for custom conversions.\r\n */\r\nkvlt.middleware.as = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"as\",\"as\",1148689641),(function (p1__46885_SHARP_){\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"as\",\"as\",1148689641),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),p1__46885_SHARP_], 0));\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (resp){\r\ntry{return (kvlt.middleware.as_type.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.as_type.cljs$core$IFn$_invoke$arity$1(resp) : kvlt.middleware.as_type.call(null,resp));\r\n}catch (e46886){if((e46886 instanceof Error)){\r\nvar e = e46886;\r\nreturn kvlt.middleware.parsing_error(resp,e);\r\n} else {\r\nthrow e46886;\r\n\r\n}\r\n}})], 0));\r\n/**\r\n * Convert the `:accept-encoding` option (keyword/str, or collection of) to an\r\n *   acceptable `Accept-Encoding` header.\r\n * \r\n *   This middleware is not likely to have any effect in a browser\r\n *   environment.\r\n */\r\nkvlt.middleware.accept_encoding = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),cljs.core.with_meta((function (p__46887){\r\nvar map__46888 = p__46887;\r\nvar map__46888__$1 = (((((!((map__46888 == null))))?(((((map__46888.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46888.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46888):map__46888);\r\nvar req = map__46888__$1;\r\nvar v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46888__$1,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396));\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),((cljs.core.coll_QMARK_(v))?clojure.string.join.cljs$core$IFn$_invoke$arity$2(\", \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.name,v)):cljs.core.name(v)));\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.accept_encoding;},new cljs.core.Symbol(\"kvlt.middleware\",\"accept-encoding\",\"kvlt.middleware/accept-encoding\",-504291282,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"accept-encoding\",\"accept-encoding\",1322607131,null),\"kvlt/middleware.cljc\",23,1,137,137,cljs.core.List.EMPTY,\"Convert the `:accept-encoding` option (keyword/str, or collection of) to an\\n  acceptable `Accept-Encoding` header.\\n\\n  This middleware is not likely to have any effect in a browser\\n  environment.\",(cljs.core.truth_(kvlt.middleware.accept_encoding)?kvlt.middleware.accept_encoding.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),new cljs.core.Keyword(null,\"origami\",\"origami\",1780950841)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),\"origami\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),new cljs.core.Keyword(null,\"b\",\"b\",1482224470)], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),\"a, b\"], null)], null)], null)));\r\n/**\r\n * Rename request's `:method` key to `:request-method`\r\n */\r\nkvlt.middleware.method = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"method\",\"method\",55703592),cljs.core.with_meta((function (p__46890){\r\nvar map__46891 = p__46890;\r\nvar map__46891__$1 = (((((!((map__46891 == null))))?(((((map__46891.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46891.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46891):map__46891);\r\nvar req = map__46891__$1;\r\nvar m = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46891__$1,new cljs.core.Keyword(null,\"method\",\"method\",55703592));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"request-method\",\"request-method\",1764796830),m);\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"method\",\"method\",55703592)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\n/**\r\n * Rename request's `:port` key to `:server-port`\r\n */\r\nkvlt.middleware.port = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"port\",\"port\",1534937262),cljs.core.with_meta((function (p__46893){\r\nvar map__46894 = p__46893;\r\nvar map__46894__$1 = (((((!((map__46894 == null))))?(((((map__46894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46894):map__46894);\r\nvar req = map__46894__$1;\r\nvar port = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46894__$1,new cljs.core.Keyword(null,\"port\",\"port\",1534937262));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"server-port\",\"server-port\",663745648),port);\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"port\",\"port\",1534937262),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"port\",\"port\",1534937262)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.method;},new cljs.core.Symbol(\"kvlt.middleware\",\"method\",\"kvlt.middleware/method\",-635028478,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"method\",\"method\",1696235119,null),\"kvlt/middleware.cljc\",14,1,158,158,cljs.core.List.EMPTY,\"Rename request's `:method` key to `:request-method`\",(cljs.core.truth_(kvlt.middleware.method)?kvlt.middleware.method.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"request-method\",\"request-method\",1764796830),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null)], null)));\r\n/**\r\n * Turn request's `:url` value, if any, into top-level `:scheme`,\r\n *   `:server-name`, `:server-port`, `:uri`, `:query-string`, and\r\n *   `:user-info` keys\r\n */\r\nkvlt.middleware.url = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"url\",\"url\",276297046),cljs.core.with_meta((function (p__46896){\r\nvar map__46897 = p__46896;\r\nvar map__46897__$1 = (((((!((map__46897 == null))))?(((((map__46897.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46897.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46897):map__46897);\r\nvar req = map__46897__$1;\r\nvar url = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46897__$1,new cljs.core.Keyword(null,\"url\",\"url\",276297046));\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([req,kvlt.middleware.util.parse_url(url)], 0));\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"url\",\"url\",276297046),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"url\",\"url\",276297046)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.url;},new cljs.core.Symbol(\"kvlt.middleware\",\"url\",\"kvlt.middleware/url\",-847267414,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"url\",\"url\",1916828573,null),\"kvlt/middleware.cljc\",11,1,173,173,cljs.core.List.EMPTY,\"Turn request's `:url` value, if any, into top-level `:scheme`,\\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\\n  `:user-info` keys\",(cljs.core.truth_(kvlt.middleware.url)?kvlt.middleware.url.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"url\",\"url\",276297046),\"ftp://localhost:9/x?x=1\"], null),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"scheme\",\"scheme\",90199613),new cljs.core.Keyword(null,\"ftp\",\"ftp\",911215182),new cljs.core.Keyword(null,\"server-name\",\"server-name\",-1012104295),\"localhost\",new cljs.core.Keyword(null,\"server-port\",\"server-port\",663745648),(9),new cljs.core.Keyword(null,\"uri\",\"uri\",-774711847),\"/x\",new cljs.core.Keyword(null,\"user-info\",\"user-info\",-1061909920),null,new cljs.core.Keyword(null,\"query-string\",\"query-string\",-1018845061),\"x=1\"], null)], null)));\r\n/**\r\n * Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\r\n * \r\n *   Assumes placement before [[content-type]].\r\n */\r\nkvlt.middleware.default_content_type = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"default-content-type\",\"default-content-type\",28331753),(function (req){\r\nif(cljs.core.truth_((function (){var and__4174__auto__ = (function (){var G__46901 = new cljs.core.Keyword(null,\"body\",\"body\",-2049205669);\r\nreturn (req.cljs$core$IFn$_invoke$arity$1 ? req.cljs$core$IFn$_invoke$arity$1(G__46901) : req.call(null,G__46901));\r\n})();\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn cljs.core.not((function (){var or__4185__auto__ = (function (){var G__46903 = new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634);\r\nreturn (req.cljs$core$IFn$_invoke$arity$1 ? req.cljs$core$IFn$_invoke$arity$1(G__46903) : req.call(null,G__46903));\r\n})();\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(req,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\r\n}\r\n})());\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n})())){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),new cljs.core.Keyword(\"text\",\"plain\",\"text/plain\",1363827258));\r\n} else {\r\nreturn req;\r\n}\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\n/**\r\n * Convert keys within request's `:headers` value to strings, and\r\n * response's `:headers` values to keywords. \r\n */\r\nkvlt.middleware.keyword_headers = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"keyword-headers\",\"keyword-headers\",1310589326),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),clojure.walk.stringify_keys], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),clojure.walk.keywordize_keys], null)], 0));\r\nkvlt.middleware.lower_case = (function kvlt$middleware$lower_case(p1__46904_SHARP_){\r\nvar G__46905 = clojure.string.lower_case(cljs.core.name(p1__46904_SHARP_));\r\nif((p1__46904_SHARP_ instanceof cljs.core.Keyword)){\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(G__46905);\r\n} else {\r\nreturn G__46905;\r\n}\r\n});\r\n/**\r\n * Convert keys within request & response's `:headers` value to lower\r\n *   case.\r\n */\r\nkvlt.middleware.lower_case_headers = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"lower-case-headers\",\"lower-case-headers\",541852280),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),(function (p1__46906_SHARP_){\r\nreturn kvlt.util.map_keys(kvlt.middleware.lower_case,p1__46906_SHARP_);\r\n})], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),(function (p1__46907_SHARP_){\r\nreturn kvlt.util.map_keys(kvlt.middleware.lower_case,p1__46907_SHARP_);\r\n})], null)], 0));\r\n/**\r\n * Convert `:basic-auth` values (vector or map) into an\r\n *  `:authorization` header.\r\n */\r\nkvlt.middleware.basic_auth = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),cljs.core.with_meta((function (p__46908){\r\nvar map__46909 = p__46908;\r\nvar map__46909__$1 = (((((!((map__46909 == null))))?(((((map__46909.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46909.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46909):map__46909);\r\nvar req = map__46909__$1;\r\nvar basic_auth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46909__$1,new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332));\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),kvlt.middleware.util.basic_auth(basic_auth));\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.basic_auth;},new cljs.core.Symbol(\"kvlt.middleware\",\"basic-auth\",\"kvlt.middleware/basic-auth\",-1836285898,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"basic-auth\",\"basic-auth\",967368195,null),\"kvlt/middleware.cljc\",18,1,214,214,cljs.core.List.EMPTY,\"Convert `:basic-auth` values (vector or map) into an\\n `:authorization` header.\",(cljs.core.truth_(kvlt.middleware.basic_auth)?kvlt.middleware.basic_auth.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"user\",\"pass\"], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),\"Basic ...\"], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-auth\",\"basic-auth\",-673163332),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"username\",\"username\",1605666410),\"user\",new cljs.core.Keyword(null,\"password\",\"password\",417022471),\"pass\"], null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),\"Basic ...\"], null)], null)], null)));\r\n/**\r\n * Convert `:oauth-token` value into an `:authorization` header\r\n */\r\nkvlt.middleware.oauth_token = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191),cljs.core.with_meta((function (p__46911){\r\nvar map__46912 = p__46911;\r\nvar map__46912__$1 = (((((!((map__46912 == null))))?(((((map__46912.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46912.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46912):map__46912);\r\nvar req = map__46912__$1;\r\nvar oauth_token = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46912__$1,new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191));\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(req,new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),[\"Bearer \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(oauth_token)].join(''));\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"has\",\"has\",1466247447),new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191),new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.oauth_token;},new cljs.core.Symbol(\"kvlt.middleware\",\"oauth-token\",\"kvlt.middleware/oauth-token\",-1556344573,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"oauth-token\",\"oauth-token\",1951946718,null),\"kvlt/middleware.cljc\",19,1,226,226,cljs.core.List.EMPTY,\"Convert `:oauth-token` value into an `:authorization` header\",(cljs.core.truth_(kvlt.middleware.oauth_token)?kvlt.middleware.oauth_token.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"oauth-token\",\"oauth-token\",311415191),\"xyz\"], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"authorization\",\"authorization\",-166302136),\"Bearer xyz\"], null)], null)], null)));\r\n/**\r\n * Merge request map with `{:method :get}`.\r\n * \r\n *   Assumes placement before [[method]].\r\n */\r\nkvlt.middleware.default_method = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"default-method\",\"default-method\",-616461794),(function (p1__46914_SHARP_){\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null),p1__46914_SHARP_], 0));\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.default_method;},new cljs.core.Symbol(\"kvlt.middleware\",\"default-method\",\"kvlt.middleware/default-method\",-2078157256,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"default-method\",\"default-method\",1024069733,null),\"kvlt/middleware.cljc\",22,1,235,235,cljs.core.List.EMPTY,\"Merge request map with `{:method :get}`.\\n\\n  Assumes placement before [[method]].\",(cljs.core.truth_(kvlt.middleware.default_method)?kvlt.middleware.default_method.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"method\",\"method\",55703592),new cljs.core.Keyword(null,\"get\",\"get\",1683182755)], null)], null)));\r\nif((typeof kvlt !== 'undefined') && (typeof kvlt.middleware !== 'undefined') && (typeof kvlt.middleware.decompress_body !== 'undefined')){\r\n} else {\r\n/**\r\n * Dispatch on the response's `:content-encoding` header value.\r\n *   Clojure implementations exist for \"gzip\" and \"deflate\".\r\n */\r\nkvlt.middleware.decompress_body = (function (){var method_table__4672__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar prefer_table__4673__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar method_cache__4674__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar cached_hierarchy__4675__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\nvar hierarchy__4676__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__46915 = cljs.core.get_global_hierarchy;\r\nreturn (fexpr__46915.cljs$core$IFn$_invoke$arity$0 ? fexpr__46915.cljs$core$IFn$_invoke$arity$0() : fexpr__46915.call(null));\r\n})());\r\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"kvlt.middleware\",\"decompress-body\"),(function (resp){\r\nvar and__4174__auto__ = new cljs.core.Keyword(null,\"body\",\"body\",-2049205669).cljs$core$IFn$_invoke$arity$1(resp);\r\nif(cljs.core.truth_(and__4174__auto__)){\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(resp,new cljs.core.Keyword(null,\"content-encoding\",\"content-encoding\",2011780217));\r\n} else {\r\nreturn and__4174__auto__;\r\n}\r\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4676__auto__,method_table__4672__auto__,prefer_table__4673__auto__,method_cache__4674__auto__,cached_hierarchy__4675__auto__));\r\n})();\r\n}\r\nkvlt.middleware.lift_content_encoding = (function kvlt$middleware$lift_content_encoding(p__46916){\r\nvar map__46917 = p__46916;\r\nvar map__46917__$1 = (((((!((map__46917 == null))))?(((((map__46917.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46917.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46917):map__46917);\r\nvar resp = map__46917__$1;\r\nvar map__46918 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46917__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\r\nvar map__46918__$1 = (((((!((map__46918 == null))))?(((((map__46918.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46918.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46918):map__46918);\r\nvar content_encoding = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46918__$1,\"content-encoding\");\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"orig-content-encoding\",\"orig-content-encoding\",-1642988561),content_encoding),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),cljs.core.dissoc,\"content-encoding\");\r\n});\r\nkvlt.middleware.decompress_body.cljs$core$IMultiFn$_add_method$arity$3(null,\"gzip\",(function (p__46921){\r\nvar map__46922 = p__46921;\r\nvar map__46922__$1 = (((((!((map__46922 == null))))?(((((map__46922.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46922.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46922):map__46922);\r\nvar resp = map__46922__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46922__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nvar body__$1 = kvlt.platform.util.gunzip(body);\r\nreturn kvlt.middleware.lift_content_encoding(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body__$1));\r\n}));\r\nkvlt.middleware.decompress_body.cljs$core$IMultiFn$_add_method$arity$3(null,\"deflate\",(function (p__46924){\r\nvar map__46925 = p__46924;\r\nvar map__46925__$1 = (((((!((map__46925 == null))))?(((((map__46925.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46925.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46925):map__46925);\r\nvar resp = map__46925__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46925__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nvar body__$1 = kvlt.platform.util.inflate(body);\r\nreturn kvlt.middleware.lift_content_encoding(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body__$1));\r\n}));\r\nkvlt.middleware.decompress_body.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (resp){\r\nreturn kvlt.middleware.lift_content_encoding(resp);\r\n}));\r\n/**\r\n * Response body decompression.  Defaults request's \"Accept-Encoding\" header.\r\n *   Can be disabled per-request via `:decompress-body? false'\r\n */\r\nkvlt.middleware.decompress = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"decompress\",\"decompress\",1427568636),cljs.core.with_meta((function (req){\r\nvar G__46927 = req;\r\nif((((!((function (){var G__46929 = new cljs.core.Keyword(null,\"decompress-body?\",\"decompress-body?\",421693857);\r\nreturn (req.cljs$core$IFn$_invoke$arity$1 ? req.cljs$core$IFn$_invoke$arity$1(G__46929) : req.call(null,G__46929));\r\n})() === false))) && (cljs.core.not(kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2(req,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396)))))){\r\nreturn kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3(G__46927,new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396),\"gzip, deflate\");\r\n} else {\r\nreturn G__46927;\r\n}\r\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"removing\",\"removing\",1104822312),new cljs.core.Keyword(null,\"accept-encoding\",\"accept-encoding\",-317924396)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (resp){\r\nreturn resp;\r\n})], 0));\r\nkvlt.middleware.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [(205),null,(206),null,(300),null,(204),null,(307),null,(304),null,(303),null,(301),null,(201),null,(302),null,(202),null,(200),null,(203),null,(207),null], null), null);\r\nkvlt.middleware.status__GT_reason = cljs.core.PersistentHashMap.fromArrays([(410),(205),(416),(101),(206),(415),(300),(204),(405),(504),(505),(502),(307),(402),(407),(305),(304),(401),(412),(417),(500),(501),(303),(100),(413),(301),(408),(411),(201),(302),(202),(200),(503),(414),(404),(203),(409),(400),(403),(406)],[new cljs.core.Keyword(null,\"gone\",\"gone\",-1158371124),new cljs.core.Keyword(null,\"reset-content\",\"reset-content\",-1325960994),new cljs.core.Keyword(null,\"requested-range-not-satisfiable\",\"requested-range-not-satisfiable\",2110942027),new cljs.core.Keyword(null,\"switching-protocols\",\"switching-protocols\",446359171),new cljs.core.Keyword(null,\"partial-content\",\"partial-content\",1842744152),new cljs.core.Keyword(null,\"unsupported-media-type\",\"unsupported-media-type\",-248081522),new cljs.core.Keyword(null,\"multiple-choices\",\"multiple-choices\",1536362331),new cljs.core.Keyword(null,\"no-content\",\"no-content\",-1860206018),new cljs.core.Keyword(null,\"method-not-allowed\",\"method-not-allowed\",-108023673),new cljs.core.Keyword(null,\"gateway-timeout\",\"gateway-timeout\",699666147),new cljs.core.Keyword(null,\"http-version-not-supported\",\"http-version-not-supported\",-847851583),new cljs.core.Keyword(null,\"bad-gateway\",\"bad-gateway\",1203629050),new cljs.core.Keyword(null,\"temporary-redirect\",\"temporary-redirect\",1675904222),new cljs.core.Keyword(null,\"payment-required\",\"payment-required\",-846532084),new cljs.core.Keyword(null,\"proxy-authentication-required\",\"proxy-authentication-required\",1911666581),new cljs.core.Keyword(null,\"use-proxy\",\"use-proxy\",-501370822),new cljs.core.Keyword(null,\"not-modified\",\"not-modified\",597560057),new cljs.core.Keyword(null,\"unauthorized\",\"unauthorized\",-2089027806),new cljs.core.Keyword(null,\"precondition-failed\",\"precondition-failed\",-430047674),new cljs.core.Keyword(null,\"expectation-failed\",\"expectation-failed\",-1685971474),new cljs.core.Keyword(null,\"internal-server-error\",\"internal-server-error\",-795953713),new cljs.core.Keyword(null,\"not-implemented\",\"not-implemented\",1918806714),new cljs.core.Keyword(null,\"see-other\",\"see-other\",286531018),new cljs.core.Keyword(null,\"continue\",\"continue\",-207346553),new cljs.core.Keyword(null,\"request-entity-too-large\",\"request-entity-too-large\",1041677666),new cljs.core.Keyword(null,\"moved-permanently\",\"moved-permanently\",590604284),new cljs.core.Keyword(null,\"request-timeout\",\"request-timeout\",-2047539823),new cljs.core.Keyword(null,\"length-required\",\"length-required\",-1380021768),new cljs.core.Keyword(null,\"created\",\"created\",-704993748),new cljs.core.Keyword(null,\"found\",\"found\",-584700170),new cljs.core.Keyword(null,\"accepted\",\"accepted\",-1953464374),new cljs.core.Keyword(null,\"ok\",\"ok\",967785236),new cljs.core.Keyword(null,\"service-unavailable\",\"service-unavailable\",751643155),new cljs.core.Keyword(null,\"request-uri-too-large\",\"request-uri-too-large\",254200757),new cljs.core.Keyword(null,\"not-found\",\"not-found\",-629079980),new cljs.core.Keyword(null,\"non-authoritative-information\",\"non-authoritative-information\",1990094789),new cljs.core.Keyword(null,\"conflict\",\"conflict\",1978796605),new cljs.core.Keyword(null,\"bad-request\",\"bad-request\",-1466249863),new cljs.core.Keyword(null,\"forbidden\",\"forbidden\",-1979448146),new cljs.core.Keyword(null,\"not-acceptable\",\"not-acceptable\",1151521504)]);\r\n/**\r\n * Turn error responses into `ExceptionInfo` instances, with the full\r\n *   response map as the attached data.  Additionally, a `:reason`\r\n *   value (e.g. `:service-unavailable`) will be used to augment the\r\n *   `:status` key.\r\n * \r\n *   For uniformity, `:type` is provided as an alias for `:reason`, e.g.\r\n */\r\nkvlt.middleware.error = kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p__46930){\r\nvar map__46931 = p__46930;\r\nvar map__46931__$1 = (((((!((map__46931 == null))))?(((((map__46931.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46931.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46931):map__46931);\r\nvar resp = map__46931__$1;\r\nvar message = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46931__$1,new cljs.core.Keyword(null,\"message\",\"message\",-406056002));\r\nvar status = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46931__$1,new cljs.core.Keyword(null,\"status\",\"status\",-1997798413));\r\nvar cause = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46931__$1,new cljs.core.Keyword(null,\"cause\",\"cause\",231901252));\r\nvar error = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46931__$1,new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\r\nvar reason = (kvlt.middleware.status__GT_reason.cljs$core$IFn$_invoke$arity$2 ? kvlt.middleware.status__GT_reason.cljs$core$IFn$_invoke$arity$2(status,error) : kvlt.middleware.status__GT_reason.call(null,status,error));\r\nif(cljs.core.truth_(((cljs.core.not(error))?(kvlt.middleware.unexceptional_status_QMARK_.cljs$core$IFn$_invoke$arity$1 ? kvlt.middleware.unexceptional_status_QMARK_.cljs$core$IFn$_invoke$arity$1(status) : kvlt.middleware.unexceptional_status_QMARK_.call(null,status)):false))){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resp,new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),reason);\r\n} else {\r\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(message,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(resp,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),(function (){var or__4185__auto__ = error;\r\nif(cljs.core.truth_(or__4185__auto__)){\r\nreturn or__4185__auto__;\r\n} else {\r\nreturn reason;\r\n}\r\n})(),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"type\",\"type\",1174270348),reason,new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),reason], 0)),cause);\r\n}\r\n})], 0));\r\nkvlt.util.doc_examples_BANG_(new cljs.core.Var(function(){return kvlt.middleware.error;},new cljs.core.Symbol(\"kvlt.middleware\",\"error\",\"kvlt.middleware/error\",1309338120,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"kvlt.middleware\",\"kvlt.middleware\",-1330994476,null),new cljs.core.Symbol(null,\"error\",\"error\",661562495,null),\"kvlt/middleware.cljc\",13,1,325,325,cljs.core.List.EMPTY,\"Turn error responses into `ExceptionInfo` instances, with the full\\n  response map as the attached data.  Additionally, a `:reason`\\n  value (e.g. `:service-unavailable`) will be used to augment the\\n  `:status` key.\\n\\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g.\",(cljs.core.truth_(kvlt.middleware.error)?kvlt.middleware.error.cljs$lang$test:null)])),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),(500),new cljs.core.Keyword(null,\"reason\",\"reason\",-2070751759),new cljs.core.Keyword(null,\"internal-server-error\",\"internal-server-error\",-795953713),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"internal-server-error\",\"internal-server-error\",-795953713),new cljs.core.Keyword(null,\"cause\",\"cause\",231901252),new cljs.core.Symbol(null,\"error?\",\"error?\",1179842368,null),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null)], null)], null)));\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","kvlt/middleware.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",["^ ","~$defmw","~$kvlt.middleware.util","~$with-doc-examples!","~$kvlt.util"],"~:excludes",["~#set",[]],"~:name","~$kvlt.middleware","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^F","^F","~$cljs.core","^Q","~$goog","^R","~$walk","~$clojure.walk","^D","^D","^P","^P","~$m","~$cats.core","~$util","^D","^U","^U","~$str","~$clojure.string","~$platform.util","~$kvlt.platform.util","^X","^X","~$cljs.reader","^[","^T","^T","~$edn","^[","^Z","^Z"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$map-keys","^F"],"~:require-macros",["^ ","^D","^D","^V","^D","^F","^F","^Q","^Q","~$m","^U","^U","^U","^[","^[","^10","^["],"~:form",["~#list",["~$ns","^J",["^17",["^12",["^[","~:as","^10"],["^D","^19","^V","~:refer-macros",["^C"]],["^F","^1:",["^E"]],["^Z","^19","^Y"],["^P","^19","^O"],["^T","^19","^S"],["^X","^19","^W"],["^U","^19","~$m"],["^F","~:refer",["^14"]]]]]],"~:flags",["^ ","^12",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^[","^D","^F","^Z","^P","^T","^X","^U"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","kvlt/middleware.cljc"],"~:compiled-at",1579687560256,"~:resource-name","kvlt/middleware.cljc","~:warnings",[],"~:source","(ns kvlt.middleware\n  (:require [#?(:clj clojure.edn :cljs cljs.reader) :as edn]\n            [kvlt.middleware.util :as util #? (:clj :refer :cljs :refer-macros) [defmw]]\n            [kvlt.util #? (:clj :refer :cljs :refer-macros) [with-doc-examples!]]\n            [kvlt.platform.util :as platform.util]\n            [clojure.set :as set]\n            [clojure.walk :as walk]\n            [clojure.string :as str]\n            [cats.core :as m]\n            [kvlt.util :refer [map-keys]]))\n\n(defn ^:no-doc header\n  ([{hs :headers :as resp} k]\n   (and hs (some hs [k (name k)])))\n  ([m k v]\n   (update m :headers\n           (fn [h]\n             (-> h\n                 (dissoc k (name k))\n                 (assoc (name k) v))))))\n\n(defn- body->string [{:keys [body] :as resp}]\n  (platform.util/byte-array->str\n   body (util/charset (header resp :content-type))))\n\n(defmulti from-content-type\n  \"Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified.\"\n  (fn [resp]\n    (-> resp (header :content-type) util/->content-type keyword)))\n\n(defmethod from-content-type :default [resp]\n  resp)\n(defmethod from-content-type :application/edn [resp]\n  (assoc resp :body (edn/read-string (body->string resp))))\n(defmethod from-content-type :application/json [{:keys [body] :as resp}]\n  (assoc resp :body (platform.util/parse-json (body->string resp))))\n\n(defn- hint->body-type [x]\n  (when (and (keyword? x) (= \"kvlt.body\" (namespace x)))\n    (keyword (name x))))\n\n(defmw body-type-hint\n  \"Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\n  the request's `:type` and `:form-params` keys\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)\"\n  ^{:has :body}\n  (fn [{:keys [body] :as req}]\n    (if-let [t (->> body meta keys (some hint->body-type))]\n      (-> req\n          (assoc  :type (keyword t) :form-params body)\n          (dissoc :body))\n      req)))\n\n(with-doc-examples! body-type-hint\n  [{:method :post\n    :body ^:kvlt.body/edn [1 2 3]}\n   {:method :post\n    :form-params [1 2 3]\n    :type :edn}])\n\n(defmw content-type\n  \"Turn request's `:content-type` (or `:type`), if any, and\n   `:character-encoding`, if any, into a \\\"content-type\\\" header & leave\n   top-level `:content-type` key in place. \"\n  (fn [{:keys [type body character-encoding] :as req}]\n    (let [{:keys [content-type] :as req}\n          (cond-> req type (assoc :content-type type))]\n      (cond-> req\n        content-type\n        (header :content-type\n                (util/->content-type content-type character-encoding))))))\n\n(with-doc-examples!\n  content-type\n  [{:content-type \"text/html\"\n    :character-encoding \"US-ASCII\"}\n   {:headers {:content-type \"text/html; charset=US-ASCII\"}\n    :content-type \"text/html\"}])\n\n(defmw accept\n  \"Turn request's `:accept` value, if any, into an \\\"accept\\\" header &\n  remove the top-level key.\"\n  ^{:has :accept :removing :accept}\n  (fn [{:keys [accept] :as req}]\n    (header req :accept (util/->content-type accept))))\n\n(with-doc-examples! accept\n  [{:accept :edn} {:headers {\"accept\" \"application/edn\"}}])\n\n(defn- as-key [resp]\n  (-> resp meta :kvlt/request :as))\n\n(defmulti ^:no-doc as-type as-key)\n(defmethod as-type :string [{:keys [body] :as resp}]\n  #? (:clj\n      (update resp :body platform.util/byte-array->str\n              (util/charset (header resp :content-type)))\n      :cljs resp))\n\n(defmethod as-type :byte-array [{:keys [body] :as resp}]\n  (assert\n   (platform.util/byte-array? body)\n   \"For platform-specific reasons, :as :byte-array is special-cased in\n  kvlt.platform.http/request\")\n  resp)\n(defmethod as-type :auto [resp] (from-content-type resp))\n(defmethod as-type :default [{:keys [headers] :as resp}]\n  (let [t    (header resp :content-type)\n        resp (assoc resp :orig-content-type t)]\n    (from-content-type\n     (header resp :content-type (util/->content-type (as-key resp))))))\n\n(defn- parsing-error [resp e]\n  (let [error (platform.util/exception->map\n               e {:error :middleware-error\n                  :type  :middleware-error})]\n    (cond-> resp\n      (not (resp :error)) (merge error))))\n\n(defmw as\n  \"Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\n\n  See [[from-content-type]] for custom conversions.\"\n  #(merge {:as :string} %)\n  (fn [resp]\n    (try\n      (as-type resp)\n      (catch #? (:clj Exception :cljs js/Error) e\n        (parsing-error resp e)))))\n\n(defmw accept-encoding\n  \"Convert the `:accept-encoding` option (keyword/str, or collection of) to an\n  acceptable `Accept-Encoding` header.\n\n  This middleware is not likely to have any effect in a browser\n  environment.\"\n  ^{:has :accept-encoding :removing :accept-encoding}\n  (fn [{v :accept-encoding :as req}]\n    (header\n     req\n     :accept-encoding\n     (if (coll? v)\n       (str/join \", \" (map name v))\n       (name v)))))\n\n(with-doc-examples! accept-encoding\n  [{:accept-encoding :origami}\n   {:headers {:accept-encoding \"origami\"}}]\n  [{:accept-encoding [:a :b]}\n   {:headers {:accept-encoding \"a, b\"}}])\n\n(defmw method\n  \"Rename request's `:method` key to `:request-method`\"\n  ^{:has :method :removing :method}\n  (fn [{m :method :as req}]\n    (assoc req :request-method m)))\n\n(defmw port\n  \"Rename request's `:port` key to `:server-port`\"\n  ^{:has :port :removing :port}\n  (fn [{port :port :as req}]\n    (assoc req :server-port port)))\n\n(with-doc-examples! method\n  [{:method :get} {:request-method :get}])\n\n(defmw url\n  \"Turn request's `:url` value, if any, into top-level `:scheme`,\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\n  `:user-info` keys\"\n  ^{:has :url :removing :url}\n  (fn [{url :url :as req}]\n    (merge req (util/parse-url url))))\n\n(with-doc-examples! url\n  [{:url \"ftp://localhost:9/x?x=1\"}\n   {:scheme :ftp\n    :server-name \"localhost\"\n    :server-port 9\n    :uri \"/x\"\n    :user-info nil\n    :query-string \"x=1\"}])\n\n(defmw default-content-type\n  \"Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\n\n  Assumes placement before [[content-type]].\"\n  (fn [req]\n    (if (and (req :body) (not (or (req :content-type) (header req :content-type))))\n      (assoc req :content-type :text/plain)\n      req)))\n\n(defmw keyword-headers\n  \"Convert keys within request's `:headers` value to strings, and\nresponse's `:headers` values to keywords. \"\n  [:headers walk/stringify-keys]\n  [:headers walk/keywordize-keys])\n\n(def ^:private lower-case\n  #(cond-> (str/lower-case (name %)) (keyword? %) keyword))\n\n(defmw lower-case-headers\n  \"Convert keys within request & response's `:headers` value to lower\n  case.\"\n  [:headers #(map-keys lower-case %)]\n  [:headers #(map-keys lower-case %)])\n\n(defmw basic-auth\n  \"Convert `:basic-auth` values (vector or map) into an\n `:authorization` header.\"\n  ^{:has :basic-auth :removing :basic-auth}\n  (fn [{:keys [basic-auth] :as req}]\n    (header req :authorization (util/basic-auth basic-auth))))\n\n(with-doc-examples! basic-auth\n  [{:basic-auth [\"user\" \"pass\"]} {:headers {:authorization \"Basic ...\"}}]\n  [{:basic-auth {:username \"user\" :password \"pass\"}}\n   {:headers {:authorization \"Basic ...\"}}])\n\n(defmw oauth-token\n  \"Convert `:oauth-token` value into an `:authorization` header\"\n  ^{:has :oauth-token :removing :oauth-token}\n  (fn [{:keys [oauth-token] :as req}]\n    (header req :authorization (str \"Bearer \" oauth-token))))\n\n(with-doc-examples! oauth-token\n  [{:oauth-token \"xyz\"} {:headers {:authorization \"Bearer xyz\"}}])\n\n(defmw default-method\n  \"Merge request map with `{:method :get}`.\n\n  Assumes placement before [[method]].\"\n  #(merge {:method :get} %))\n\n(with-doc-examples! default-method\n  [{} {:method :get}])\n\n(defmulti decompress-body\n  \"Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \\\"gzip\\\" and \\\"deflate\\\".\"\n  (fn [resp]\n    (and (:body resp) (header resp :content-encoding))))\n\n(defn ^:no-doc lift-content-encoding [{{:strs [content-encoding]} :headers :as resp}]\n  (-> resp\n      (assoc :orig-content-encoding content-encoding)\n      (update :headers dissoc \"content-encoding\")))\n\n(defmethod decompress-body \"gzip\" [{:keys [body] :as resp}]\n  (let [body (platform.util/gunzip body)]\n    (lift-content-encoding (assoc resp :body body))))\n\n(defmethod decompress-body \"deflate\" [{:keys [body] :as resp}]\n  (let [body (platform.util/inflate body)]\n    (lift-content-encoding (assoc resp :body body))))\n\n(defmethod decompress-body :default [resp]\n  (lift-content-encoding resp))\n\n(defmw decompress\n  \"Response body decompression.  Defaults request's \\\"Accept-Encoding\\\" header.\n  Can be disabled per-request via `:decompress-body? false'\"\n  ^{:removing :accept-encoding}\n  (fn [req]\n    (cond-> req\n      (and (not (false? (req :decompress-body?)))\n           (not (header req :accept-encoding)))\n      (header :accept-encoding \"gzip, deflate\")))\n  (fn [resp]\n    #? (:clj  (let [decomp? (-> resp meta :kvlt/request :decompress-body? false? not)]\n                (cond-> resp (and decomp? (not-empty (resp :body))) decompress-body))\n        :cljs resp)))\n\n(def ^:no-doc unexceptional-status?\n  #{200 201 202 203 204 205 206 207 300 301 302 303 304 307})\n\n(def ^:no-doc status->reason\n  {100 :continue\n   101 :switching-protocols\n   200 :ok\n   201 :created\n   202 :accepted\n   203 :non-authoritative-information\n   204 :no-content\n   205 :reset-content\n   206 :partial-content\n   300 :multiple-choices\n   301 :moved-permanently\n   302 :found\n   303 :see-other\n   304 :not-modified\n   305 :use-proxy\n   307 :temporary-redirect\n   400 :bad-request\n   401 :unauthorized\n   402 :payment-required ;; serious business\n   403 :forbidden\n   404 :not-found\n   405 :method-not-allowed\n   406 :not-acceptable\n   407 :proxy-authentication-required\n   408 :request-timeout\n   409 :conflict\n   410 :gone\n   411 :length-required\n   412 :precondition-failed\n   413 :request-entity-too-large\n   414 :request-uri-too-large\n   415 :unsupported-media-type\n   416 :requested-range-not-satisfiable\n   417 :expectation-failed\n   500 :internal-server-error\n   501 :not-implemented\n   502 :bad-gateway\n   503 :service-unavailable\n   504 :gateway-timeout\n   505 :http-version-not-supported})\n\n(defmw error\n  \"Turn error responses into `ExceptionInfo` instances, with the full\n  response map as the attached data.  Additionally, a `:reason`\n  value (e.g. `:service-unavailable`) will be used to augment the\n  `:status` key.\n\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g.\"\n  nil\n  (fn [{:keys [message status cause error] :as resp}]\n    (let [reason (status->reason status error)]\n      (if (and (not error) (unexceptional-status? status))\n        (assoc resp :reason reason)\n        (ex-info message\n                 (assoc resp\n                   :error  (or error reason)\n                   :type   reason\n                   :reason reason)\n                 cause)))))\n\n(with-doc-examples! error\n  [{:status  500\n    :reason  :internal-server-error\n    :type    :internal-server-error\n    :cause   error?\n    :headers ...}])\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__46766","kvlt.middleware/header","js/Error","p__46767","map__46768","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","hs","resp","k","and__4174__auto__","cljs.core/some","cljs.core/name","m","v","cljs.core.update.cljs$core$IFn$_invoke$arity$3","h","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__46785","map__46786","kvlt.middleware/body->string","body","kvlt.platform.util/byte-array->str","kvlt.middleware.util/charset","kvlt.middleware.header.cljs$core$IFn$_invoke$arity$2","js/kvlt","js/kvlt.middleware","js/kvlt.middleware.from-content-type","method-table__4672__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__46796","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","kvlt.middleware/from-content-type","kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$1","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","p__46802","map__46803","kvlt.platform.util/parse-json","kvlt.middleware/hint->body-type","x","cljs.core/Keyword","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","kvlt.middleware.util.__GT_mw.cljs$core$IFn$_invoke$arity$variadic","kvlt.middleware/body-type-hint","p__46811","map__46812","req","temp__5733__auto__","t","cljs.core/meta","cljs.core/keys","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","kvlt.util/doc-examples!","kvlt.middleware/content-type","p__46820","map__46821","type","character-encoding","map__46837","content-type","G__46838","G__46842","kvlt.middleware.header.cljs$core$IFn$_invoke$arity$3","kvlt.middleware.util.__GT_content_type.cljs$core$IFn$_invoke$arity$2","kvlt.middleware/accept","p__46848","map__46850","accept","kvlt.middleware/as-key","js/kvlt.middleware.as-type","fexpr__46856","kvlt.middleware/as-type","p__46860","map__46861","p__46863","map__46864","kvlt.platform.util/byte-array?","p__46879","map__46880","headers","G__46882","kvlt.middleware/parsing-error","e","error","kvlt.platform.util.exception__GT_map.cljs$core$IFn$_invoke$arity$variadic","G__46883","cljs.core/not","G__46884","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__46885#","kvlt.middleware/as","e46886","kvlt.middleware/accept-encoding","p__46887","map__46888","cljs.core/coll?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","kvlt.middleware/method","p__46890","map__46891","kvlt.middleware/port","p__46893","map__46894","port","kvlt.middleware/url","p__46896","map__46897","url","kvlt.middleware.util/parse-url","kvlt.middleware/default-content-type","G__46901","or__4185__auto__","G__46903","kvlt.middleware/keyword-headers","clojure.walk/stringify-keys","clojure.walk/keywordize-keys","p1__46904#","kvlt.middleware/lower-case","G__46905","clojure.string/lower-case","p1__46906#","p1__46907#","kvlt.middleware/lower-case-headers","kvlt.util/map-keys","kvlt.middleware/basic-auth","p__46908","map__46909","basic-auth","kvlt.middleware.util/basic-auth","kvlt.middleware/oauth-token","p__46911","map__46912","oauth-token","p1__46914#","kvlt.middleware/default-method","js/kvlt.middleware.decompress-body","fexpr__46915","kvlt.middleware/decompress-body","p__46916","map__46917","map__46918","kvlt.middleware/lift-content-encoding","content-encoding","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__46921","map__46922","kvlt.platform.util/gunzip","p__46924","map__46925","kvlt.platform.util/inflate","kvlt.middleware/decompress","G__46927","G__46929","kvlt.middleware/unexceptional-status?","kvlt.middleware/status->reason","kvlt.middleware/error","p__46930","map__46931","message","status","cause","reason","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],[1579687410012,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^1@","goog/async/freelist.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/labs/useragent/platform.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.labs.userAgent.util","~$goog.string"]]],["^1@","goog/crypt/crypt.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.array","~$goog.asserts"]]],["^1@","goog/timer/timer.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.Promise","~$goog.events.EventTarget"]]],["^1@","cljs/tools/reader/impl/utils.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","^1S"]]],["^1@","goog/math/math.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U"]]],["^1@","goog/html/trustedtypes.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/string/stringformat.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1S"]]],["^1@","goog/events/eventtype.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1@","goog/labs/useragent/browser.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1R","~$goog.object","~$goog.string.internal"]]],["^1@","goog/html/safeurl.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1["]]],["^1@","goog/array/array.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U"]]],["^1@","goog/useragent/useragent.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1R","~$goog.reflect","^1S"]]],["^1@","goog/structs/prioritypool.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["~:shadow.build.npm/resource","node_modules/bluebird/js/browser/bluebird.js"],[1579687469000,1579687469000,1579640166173,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["~$shadow.js","~$module$node_modules$process$browser"]]],["^1@","goog/async/run.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1@","taoensso/encore.cljs"],[1579687473255,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","^P","^[","~$cljs.tools.reader.edn","~$cljs.test","^1Z","^1S","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1@","goog/debug/error.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","cats/protocols.cljc"],[1579687471496,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q"]]],["^1@","goog/async/workqueue.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.async.FreeList"]]],["^1@","promesa/impl/scheduler.cljc"],[1579687471777,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","~$promesa.impl.proto"]]],["^1@","goog/events/events.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^1X","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1@","goog/promise/resolver.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/events/browserfeature.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1Y"]]],["^1@","cljs/tools/reader/edn.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1S","^2E"]]],["^1@","goog/structs/priorityqueue.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.structs.Heap"]]],["^1@","goog/net/xhrio.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.Timer","^1T","^1U","^2P","^1W","~$goog.json.hybrid","~$goog.log","^2L","^2K","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1Z","^1S","^2J","~$goog.structs.Map","~$goog.uri.utils","^1Y"]]],["^1@","goog/promise/thenable.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/dom/nodetype.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","cljs/tools/reader/impl/inspect.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q"]]],["^1@","cljs/pprint.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","^1S","^2E"]]],["^1@","cljs/tools/reader.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^2U","^2V","^2W","^2T","^1T","^1S","^2E"]]],["^1@","cats/labs/promise.cljc"],[1579687471496,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^U","~$cats.context","~$cats.protocols","~$promesa.core","^2O"]]],["^1@","goog/net/wrapperxmlhttpfactory.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1@","goog/events/eventtarget.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.Disposable","^1U","^2F","~$goog.events.Event","^2R","^2S","^1Z"]]],["^1@","cats/core.cljc"],[1579687471496,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^36","^P","^35"]]],["^1@","goog/disposable/disposable.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.disposable.IDisposable"]]],["^1@","goog/string/typedstring.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","shadow/js.js"],[1579687469605,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/object/object.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/dom/asserts.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U"]]],["^1@","goog/structs/set.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^2J","~$goog.structs.Collection","^33"]]],"~:SHADOW-TIMESTAMP",[1579687469000,1579687405000],["^1@","kvlt/platform/util.cljs"],[1579687471237,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^T"]]],["^1@","goog/math/long.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","^29"]]],["^1@","goog/events/listener.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.events.ListenableKey"]]],["^1@","goog/html/trustedresourceurl.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.html.trustedtypes","^22","^23","^24","^25"]]],["^1@","goog/events/listenermap.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","~$goog.events.Listener","^1Z"]]],["^1@","goog/events/eventid.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","taoensso/truss.cljs"],[1579687473542,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","~$taoensso.truss.impl"]]],["^1@","goog/string/internal.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/functions/functions.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","kvlt/middleware/util.cljc"],[1579687471237,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^Z","~$cats.labs.promise","^X","^U","~$taoensso.timbre","~$goog.crypt.base64"]]],["^1@","goog/html/safestyle.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","~$goog.html.SafeUrl","^24","^25","^1["]]],["^1@","goog/dom/safe.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3F","^21","~$goog.html.uncheckedconversions","^24","^1["]]],["^1@","taoensso/truss/impl.cljs"],[1579687473542,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^P"]]],["^1@","clojure/walk.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q"]]],["^1@","goog/useragent/product.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^26","^28","^1Y"]]],["^1@","cljs/core/async/impl/protocols.cljs"],[1579687402340,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q"]]],["^1@","goog/net/eventtype.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/structs/map.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1@","goog/net/xhriopool.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^2G","~$goog.structs.PriorityPool"]]],["^1@","goog/html/safehtml.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","~$goog.dom.TagName","~$goog.dom.tags","^3J","^3K","~$goog.html.SafeStyleSheet","^3F","^21","^3@","^22","^23","^26","^1Z","^24","^25","^1["]]],["^1@","goog/dom/tags.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1Z"]]],["^1@","goog/math/size.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","promesa/impl/proto.cljc"],[1579687471777,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q"]]],["^1@","kvlt/util.cljc"],[1579687471237,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","~$cljs.core.async.impl.protocols","~$cljs.pprint"]]],["^1@","goog/structs/queue.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T"]]],["^1@","goog/labs/useragent/engine.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1R","^1S"]]],["^1@","taoensso/timbre/appenders/core.cljs"],[1579687473239,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","~$taoensso.encore"]]],["^1@","cljs/reader.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^1Z","^2X","^2B","^2E"]]],["^1@","cats/context.cljc"],[1579687471496,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^36"]]],["^1@","goog/dom/dom.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3P","~$goog.dom.safe","^3I","^3L","~$goog.math.Coordinate","~$goog.math.Size","^1Z","^1S","~$goog.string.Unicode","^1Y"]]],["^1@","goog/asserts/asserts.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.debug.Error","^3W"]]],["^1@","goog/debug/logbuffer.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.debug.LogRecord"]]],["^1@","goog/uri/uri.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","^1S","^2J","^33","^34","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/net/errorcode.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/i18n/bidi.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/disposable/idisposable.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/promise/promise.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.Thenable","^1U","^2N","~$goog.async.run","^2A","^40","~$goog.promise.Resolver"]]],["^2<","node_modules/process/browser.js"],[1579687469000,1579687469000,1579640166236,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^2="]]],["^1@","goog/fs/url.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/debug/logrecord.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/base.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",[]]],["^1@","promesa/core.cljc"],[1579687471777,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","~$promesa.impl.promise","^2O","~$promesa.impl.scheduler"]]],["^1@","goog/json/hybrid.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.json"]]],["^1@","goog/structs/structs.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1Z"]]],["^1@","cljs/tools/reader/impl/errors.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^2U","^X","~$cljs.tools.reader.impl.inspect"]]],["^1@","org/bluebird.cljs"],[1579687470322,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","~$module$node_modules$bluebird$js$browser$bluebird"]]],["^1@","clojure/string.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^1S","^2E"]]],["^1@","goog/structs/pool.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^3:","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1@","goog/net/httpstatus.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/structs/heap.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1Z","~$goog.structs.Node"]]],["^1@","goog/debug/entrypointregistry.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U"]]],["^1@","goog/string/string.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^3X","^3L","^24","^1["]]],["^1@","goog/reflect/reflect.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/labs/useragent/util.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1["]]],["^1@","kvlt/middleware.cljc"],[1579687471237,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^[","^D","^F","^Z","^P","^T","^X","^U"]]],["^1@","goog/debug/debug.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","~$goog.debug.errorcontext","^1Y"]]],["^1@","goog/string/stringbuffer.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/math/coordinate.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","~$goog.math"]]],["^1@","goog/debug/errorcontext.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","cljs/tools/reader/reader_types.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^2V","^1S","^2E"]]],["^1@","goog/iter/iter.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","^3H","^4@"]]],["^1@","goog/async/nexttick.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^2P","~$goog.dom","^3P","^3X","^3H","^3I","^21","^26","^27","^24"]]],["^1@","goog/html/uncheckedconversions.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","^3I","^3J","^3K","^3R","^3F","^21","^24","^1["]]],["^1@","goog/debug/logger.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","~$goog.debug","~$goog.debug.LogBuffer","^41"]]],["^1@","goog/events/event.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^3:","~$goog.events.EventId"]]],["^1@","cljs/tools/reader/impl/commons.cljs"],[1579687401423,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^2T","^2U","^2V"]]],["^1@","goog/dom/htmlelement.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","cljs/core.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["~$goog.math.Long","~$goog.math.Integer","^1S","^1Z","^1T","~$goog.Uri","^2E"]]],["^1@","goog/html/safescript.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","^3@","^24","^25"]]],["^1@","goog/log/log.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^4B","~$goog.debug.LogManager","^41","~$goog.debug.Logger"]]],["^1@","goog/html/safestylesheet.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","^3K","^1Z","^24","^25","^1["]]],["^1@","goog/structs/collection.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/events/browserevent.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^4B","^1X","^3;","~$goog.events.EventType","^29","^1Y"]]],["^1@","goog/math/integer.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^29"]]],["^1@","goog/structs/node.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/dom/browserfeature.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1Y"]]],["^1@","clojure/set.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q"]]],["^1@","goog/uri/utils.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1T","^1U","^1S"]]],["^1@","goog/string/const.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","^25"]]],["^1@","taoensso/timbre.cljs"],[1579687473239,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","^3U","~$taoensso.timbre.appenders.core"]]],["^1@","goog/json/json.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","goog/events/listenable.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^4D"]]],["^1@","goog/net/xmlhttpfactory.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^38"]]],["^1@","goog/net/xmlhttp.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.net.WrapperXmlHttpFactory","^39"]]],["^1@","cljs/test.cljs"],[1579687405264,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","^X","^3T"]]],["^1@","goog/net/xhrlike.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R"]]],["^1@","promesa/impl/promise.cljc"],[1579687471777,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^Q","~$org.bluebird","^2O"]]],["^1@","goog/crypt/base64.js"],[1579687410012,"^1M",["^ ","^1N",null,"^1O",["^H",[]],"^1P",["^R","^1U","~$goog.crypt","^1S","^1Y","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/timbre/4.7.4/timbre-4.7.4.jar!/taoensso/timbre/appenders/core.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/columns.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/funcool/cats/2.0.0/cats-2.0.0.jar!/cats/core.cljc",1579687471000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/timbre/4.7.4/timbre-4.7.4.jar!/taoensso/timbre.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/ansi.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/writer.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/io/aviso/pretty/0.1.30/pretty-0.1.30.jar!/io/aviso/exception.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/stacktrace.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/truss/1.3.5/truss-1.3.5.jar!/taoensso/truss.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/funcool/cats/2.0.0/cats-2.0.0.jar!/cats/context.cljc",1579687471000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/pprint.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/io/nervous/kvlt/0.1.4/kvlt-0.1.4.jar!/kvlt/middleware/util.cljc",1579687471000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer/api.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/template.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1579687401000,"jar:file:/C:/Users/PC/.m2/repository/io/nervous/kvlt/0.1.4/kvlt-0.1.4.jar!/kvlt/util.cljc",1579687471000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/core.async/0.6.532/core.async-0.6.532.jar!/clojure/core/async/impl/protocols.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/test.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/test.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/walk.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1579687402000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/reader.clj",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/funcool/cats/2.0.0/cats-2.0.0.jar!/cats/protocols.cljc",1579687471000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1579687405000,"jar:file:/C:/Users/PC/.m2/repository/io/nervous/kvlt/0.1.4/kvlt-0.1.4.jar!/kvlt/platform/util.clj",1579687471000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/encore/2.79.1/encore-2.79.1.jar!/taoensso/encore.clj",1579687473000,"jar:file:/C:/Users/PC/.m2/repository/com/taoensso/truss/1.3.5/truss-1.3.5.jar!/taoensso/truss/impl.clj",1579687473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","kvlt/middleware.cljc","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","^C","^D","^E","^F"],"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^P","^F","^F","^Q","^Q","^R","^R","^S","^T","^D","^D","^P","^P","~$m","^U","^V","^D","^U","^U","^W","^X","^Y","^Z","^X","^X","^[","^[","^T","^T","^10","^[","^Z","^Z"],"^11",["^H",["^12"]],"~:shadow/js-access-global",["^H",["Error"]],"^13",["^ ","^14","^F"],"~:defs",["^ ","~$body-type-hint",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",48,"^8",8,"^9",48,"^:",22],"^I","~$kvlt.middleware/body-type-hint","^6","kvlt/middleware.cljc","^:",22,"^8",1,"^7",48,"^9",48,"~:tag","~$function","~:doc","Look for a body with a `:kvlt.body/`-prefixed metadata key, setting\n  the request's `:type` and `:form-params` keys\n  accordingly (e.g. `:body ^:kvlt/edn {:x 1}`)"],"~$basic-auth",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",214,"^8",8,"^9",214,"^:",18],"^I","~$kvlt.middleware/basic-auth","^6","kvlt/middleware.cljc","^:",18,"^8",1,"^7",214,"^9",214,"^60","^61","^62","Convert `:basic-auth` values (vector or map) into an\n `:authorization` header."],"~$as-key",["^ ","~:protocol-inline",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",96,"^8",8,"^9",96,"^:",14,"~:private",true,"~:arglists",["^17",["~$quote",["^17",[["~$resp"]]]]]],"^67",true,"^I","~$kvlt.middleware/as-key","^6","kvlt/middleware.cljc","^:",14,"~:method-params",["^17",[["^6:"]]],"~:protocol-impl",null,"~:arglists-meta",["^17",[null,null]],"^8",1,"~:variadic?",false,"^7",96,"~:ret-tag","~$any","^9",96,"~:max-fixed-arity",1,"~:fn-var",true,"^68",["^17",["^69",["^17",[["^6:"]]]]]],"~$decompress",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",266,"^8",8,"^9",266,"^:",18],"^I","~$kvlt.middleware/decompress","^6","kvlt/middleware.cljc","^:",18,"^8",1,"^7",266,"^9",266,"^60","^61","^62","Response body decompression.  Defaults request's \"Accept-Encoding\" header.\n  Can be disabled per-request via `:decompress-body? false'"],"~$lift-content-encoding",["^ ","~:no-doc",true,"^66",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",250,"^8",16,"^9",250,"^:",37,"^6G",true,"^68",["^17",["^69",["^17",[[["^1L",[["^ ","~:strs",["~$content-encoding"]],"~:headers","^19","^6:"]]]]]]]],"^I","~$kvlt.middleware/lift-content-encoding","^6","kvlt/middleware.cljc","^:",37,"^6<",["^17",[["~$p__46916"]]],"^6=",null,"^6>",["^17",[null,null]],"^8",1,"^6?",false,"^7",250,"^6@",["^H",["~$clj","^6A"]],"^9",250,"^6B",1,"^6C",true,"^68",["^17",["^69",["^17",[[["^1L",[["^ ","^6H",["^6I"]],"^6J","^19","^6:"]]]]]]]],"~$default-method",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",235,"^8",8,"^9",235,"^:",22],"^I","~$kvlt.middleware/default-method","^6","kvlt/middleware.cljc","^:",22,"^8",1,"^7",235,"^9",235,"^60","^61","^62","Merge request map with `{:method :get}`.\n\n  Assumes placement before [[method]]."],"~$accept",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",86,"^8",8,"^9",86,"^:",14],"^I","~$kvlt.middleware/accept","^6","kvlt/middleware.cljc","^:",14,"^8",1,"^7",86,"^9",86,"^60","^61","^62","Turn request's `:accept` value, if any, into an \"accept\" header &\n  remove the top-level key."],"~$from-content-type",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",26,"^8",11,"^9",26,"^:",28,"^62","Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified."],"^I","~$kvlt.middleware/from-content-type","^6","kvlt/middleware.cljc","^:",28,"^8",1,"^7",26,"^9",26,"^60","~$cljs.core/MultiFn","^62","Used by [[as]] to transform an incoming response.  Dispatches on\n  `:content-type`' header, as a namespace-qualified\n  keyword (e.g. `:application/edn`).  The input and output are the\n  top-level response map, not only the response body.\n\n  The default implementation (i.e. unrecognized content-type) returns\n  the response map unmodified."],"~$decompress-body",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",244,"^8",11,"^9",244,"^:",26,"^62","Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \"gzip\" and \"deflate\"."],"^I","~$kvlt.middleware/decompress-body","^6","kvlt/middleware.cljc","^:",26,"^8",1,"^7",244,"^9",244,"^60","^6T","^62","Dispatch on the response's `:content-encoding` header value.\n  Clojure implementations exist for \"gzip\" and \"deflate\"."],"~$parsing-error",["^ ","^66",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",119,"^8",8,"^9",119,"^:",21,"^67",true,"^68",["^17",["^69",["^17",[["^6:","~$e"]]]]]],"^67",true,"^I","~$kvlt.middleware/parsing-error","^6","kvlt/middleware.cljc","^:",21,"^6<",["^17",[["^6:","~$e"]]],"^6=",null,"^6>",["^17",[null,null]],"^8",1,"^6?",false,"^7",119,"^6@",["^H",[null,"^6A","~$clj-nil"]],"^9",119,"^6B",2,"^6C",true,"^68",["^17",["^69",["^17",[["^6:","~$e"]]]]]],"~$method",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",158,"^8",8,"^9",158,"^:",14],"^I","~$kvlt.middleware/method","^6","kvlt/middleware.cljc","^:",14,"^8",1,"^7",158,"^9",158,"^60","^61","^62","Rename request's `:method` key to `:request-method`"],"~$lower-case",["^ ","^66",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",205,"^8",16,"^9",205,"^:",26,"^67",true],"^67",true,"^I","~$kvlt.middleware/lower-case","^6","kvlt/middleware.cljc","^:",26,"^6<",["^17",[["~$p1__46904#"]]],"^6=",null,"^6>",["^17",[]],"^8",1,"^6?",false,"^7",205,"^6@",["^H",["~$cljs.core/Keyword","~$string","^6Y"]],"^9",205,"^6B",1,"^6C",true,"^68",null],"~$default-content-type",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",190,"^8",8,"^9",190,"^:",28],"^I","~$kvlt.middleware/default-content-type","^6","kvlt/middleware.cljc","^:",28,"^8",1,"^7",190,"^9",190,"^60","^61","^62","Add `:content-type` key having value `:text/plain`, if no `:content-type` present.\n\n  Assumes placement before [[content-type]]."],"~$as",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",126,"^8",8,"^9",126,"^:",10],"^I","~$kvlt.middleware/as","^6","kvlt/middleware.cljc","^:",10,"^8",1,"^7",126,"^9",126,"^60","^61","^62","Response body type conversion --- `:string` `:byte-array` `:auto` `:json` `:edn` etc..\n\n  See [[from-content-type]] for custom conversions."],"~$header",["^ ","^6G",true,"^66",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",12,"^8",16,"^9",12,"^:",22,"^6G",true,"^68",["^17",["^69",["^17",[[["^ ","~$hs","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]]]],"~:top-fn",["^ ","^6?",false,"~:fixed-arity",3,"^6B",3,"^6<",["^17",[[["^ ","^7:","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]],"^68",["^17",[[["^ ","^7:","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]],"^6>",["^17",[null,null]]]],"^I","~$kvlt.middleware/header","^6","kvlt/middleware.cljc","^:",22,"^7;",["^ ","^6?",false,"^7<",3,"^6B",3,"^6<",["^17",[[["^ ","^7:","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]],"^68",["^17",[[["^ ","^7:","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]],"^6>",["^17",[null,null]]],"^6<",["^17",[[["^ ","^7:","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]],"^6=",null,"^7<",3,"^6>",["^17",[null,null]],"^8",1,"^6?",false,"~:methods",[["^ ","^7<",2,"^6?",false,"^60",["^H",["^6A","^6Y"]]],["^ ","^7<",3,"^6?",false,"^60",["^H",["^6M","^6A"]]]],"^7",12,"^9",12,"^6B",3,"^6C",true,"^68",["^17",[[["^ ","^7:","^6J","^19","^6:"],"~$k"],["~$m","~$k","~$v"]]]],"~$port",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",164,"^8",8,"^9",164,"^:",12],"^I","~$kvlt.middleware/port","^6","kvlt/middleware.cljc","^:",12,"^8",1,"^7",164,"^9",164,"^60","^61","^62","Rename request's `:port` key to `:server-port`"],"~$as-type",["^ ","^6G",true,"^5",["^ ","^6","kvlt/middleware.cljc","^7",99,"^8",20,"^9",99,"^:",27,"^6G",true],"^I","~$kvlt.middleware/as-type","^6","kvlt/middleware.cljc","^:",27,"^8",1,"^7",99,"^9",99,"^60","^6T"],"~$keyword-headers",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",199,"^8",8,"^9",199,"^:",23],"^I","~$kvlt.middleware/keyword-headers","^6","kvlt/middleware.cljc","^:",23,"^8",1,"^7",199,"^9",199,"^60","^61","^62","Convert keys within request's `:headers` value to strings, and\nresponse's `:headers` values to keywords. "],"~$hint->body-type",["^ ","^66",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",44,"^8",8,"^9",44,"^:",23,"^67",true,"^68",["^17",["^69",["^17",[["~$x"]]]]]],"^67",true,"^I","~$kvlt.middleware/hint->body-type","^6","kvlt/middleware.cljc","^:",23,"^6<",["^17",[["~$x"]]],"^6=",null,"^6>",["^17",[null,null]],"^8",1,"^6?",false,"^7",44,"^6@",["^H",["^73","^6Y"]],"^9",44,"^6B",1,"^6C",true,"^68",["^17",["^69",["^17",[["~$x"]]]]]],"~$body->string",["^ ","^66",null,"^5",["^ ","^6","kvlt/middleware.cljc","^7",22,"^8",8,"^9",22,"^:",20,"^67",true,"^68",["^17",["^69",["^17",[[["^ ","~:keys",["~$body"],"^19","^6:"]]]]]]],"^67",true,"^I","~$kvlt.middleware/body->string","^6","kvlt/middleware.cljc","^:",20,"^6<",["^17",[["~$p__46785"]]],"^6=",null,"^6>",["^17",[null,null]],"^8",1,"^6?",false,"^7",22,"^6@",["^H",[null,"^6A"]],"^9",22,"^6B",1,"^6C",true,"^68",["^17",["^69",["^17",[[["^ ","^7H",["^7I"],"^19","^6:"]]]]]]],"~$status->reason",["^ ","^6G",true,"^5",["^ ","^6","kvlt/middleware.cljc","^7",283,"^8",15,"^9",283,"^:",29,"^6G",true],"^I","~$kvlt.middleware/status->reason","^6","kvlt/middleware.cljc","^:",29,"^8",1,"^7",283,"^9",283,"^60","~$cljs.core/IMap"],"~$accept-encoding",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",137,"^8",8,"^9",137,"^:",23],"^I","~$kvlt.middleware/accept-encoding","^6","kvlt/middleware.cljc","^:",23,"^8",1,"^7",137,"^9",137,"^60","^61","^62","Convert the `:accept-encoding` option (keyword/str, or collection of) to an\n  acceptable `Accept-Encoding` header.\n\n  This middleware is not likely to have any effect in a browser\n  environment."],"~$content-type",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",67,"^8",8,"^9",67,"^:",20],"^I","~$kvlt.middleware/content-type","^6","kvlt/middleware.cljc","^:",20,"^8",1,"^7",67,"^9",67,"^60","^61","^62","Turn request's `:content-type` (or `:type`), if any, and\n   `:character-encoding`, if any, into a \"content-type\" header & leave\n   top-level `:content-type` key in place. "],"~$url",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",173,"^8",8,"^9",173,"^:",11],"^I","~$kvlt.middleware/url","^6","kvlt/middleware.cljc","^:",11,"^8",1,"^7",173,"^9",173,"^60","^61","^62","Turn request's `:url` value, if any, into top-level `:scheme`,\n  `:server-name`, `:server-port`, `:uri`, `:query-string`, and\n  `:user-info` keys"],"~$oauth-token",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",226,"^8",8,"^9",226,"^:",19],"^I","~$kvlt.middleware/oauth-token","^6","kvlt/middleware.cljc","^:",19,"^8",1,"^7",226,"^9",226,"^60","^61","^62","Convert `:oauth-token` value into an `:authorization` header"],"~$error",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",325,"^8",8,"^9",325,"^:",13],"^I","~$kvlt.middleware/error","^6","kvlt/middleware.cljc","^:",13,"^8",1,"^7",325,"^9",325,"^60","^61","^62","Turn error responses into `ExceptionInfo` instances, with the full\n  response map as the attached data.  Additionally, a `:reason`\n  value (e.g. `:service-unavailable`) will be used to augment the\n  `:status` key.\n\n  For uniformity, `:type` is provided as an alias for `:reason`, e.g."],"~$lower-case-headers",["^ ","^5",["^ ","^6","kvlt/middleware.cljc","^7",208,"^8",8,"^9",208,"^:",26],"^I","~$kvlt.middleware/lower-case-headers","^6","kvlt/middleware.cljc","^:",26,"^8",1,"^7",208,"^9",208,"^60","^61","^62","Convert keys within request & response's `:headers` value to lower\n  case."],"~$unexceptional-status?",["^ ","^6G",true,"^5",["^ ","^6","kvlt/middleware.cljc","^7",280,"^8",15,"^9",280,"^:",36,"^6G",true],"^I","~$kvlt.middleware/unexceptional-status?","^6","kvlt/middleware.cljc","^:",36,"^8",1,"^7",280,"^9",280,"^60","~$cljs.core/ISet"]],"^15",["^ ","^D","^D","^V","^D","^F","^F","^Q","^Q","~$m","^U","^U","^U","^[","^[","^10","^["],"~:cljs.analyzer/constants",["^ ","^11",["^H",["~:user-info","~:not-acceptable","~$error?","~:decompress-body?","~:http-version-not-supported","^6[","~:request-entity-too-large","~:unauthorized","^5Z","~:get","^7V","^63","~:switching-protocols","~:gateway-timeout","~:cause","^6N","~:application/edn","~:non-authoritative-information","^6P","~:else","~:precondition-failed","~:continue","~:method-not-allowed","~:password","~:removing","~:method","~:default","^7X","~:authorization","^L","^I","^19","~:byte-array","~:default-content-type","^7T","~:see-other","^6","~:middleware-error","~:username","^7R","^:","~:accepted","~:application/json","~:requested-range-not-satisfiable","^6Q","~:gone","~:type","~:payment-required","~:created","^7P","~:forbidden","~:port","~:string","~:keyword-headers","~:expectation-failed","~:ftp","~:unsupported-media-type","~:internal-server-error","^6Z","^8","^6J","~:orig-content-encoding","~:server-port","^5[","~:request-timeout","~:reason","~:form-params","^7","~:service-unavailable","~:status","~:not-found","^J","~:ok","~:accept-encoding","~:orig-content-type","~:proxy-authentication-required","~:request-uri-too-large","~:edn","^64","~:url","~:found","~:content-type","~:b","^9","~:has","~:oauth-token","~:character-encoding","~:post","~:length-required","~:error","^6O","~:lower-case-headers","~:partial-content","~:content-encoding","~:bad-request","~:uri","~:not-modified","~:origami","~:server-name","~:use-proxy","~:kvlt.body/edn","~:text/plain","~:not-implemented","^68","~:bad-gateway","~:query-string","~:body-type-hint","~:hierarchy","^7O","~:body","~:multiple-choices","~$...","^62","~:auto","~:basic-auth","~:moved-permanently","~:decompress","^7Q","~:conflict","~:scheme","~:test","^7S","~:kvlt/request","~:temporary-redirect","~:reset-content","~:request-method","~:default-method","~:no-content","~:a","~:message","^7U","^7W","~:accept"]],"~:order",["^6J","^9X","^9A","^9W","^8G","^8>","^8O","^9V","^8R","^95","^9B","^5[","^L","^I","^6","^:","^8","^7","^9","^68","^62","^:5","^J","^5Z","^8F","^9E","^9Q","^9>","^9D","^7R","^7Q","^:=","^8E","^6Q","^6P","^19","^:6","^8W","^8I","^9[","^9;","^9G","^8L","^8@","^9:","^7P","^7O","^9N","~:a","~:b~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1L",[["^:A","~:static-fns"],true,["^:A","~:shadow-tweaks"],null,["^:A","~:elide-asserts"],false,["^:A","~:optimize-constants"],null,["^:A","^1C"],null,["^:A","~:external-config"],null,["^:A","~:tooling-config"],null,["^:A","~:emit-constants"],null,["^:A","~:load-tests"],null,["^:A","~:form-size-threshold"],null,["^:A","~:infer-externs"],"^9[",["^:A","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:A","~:fn-invoke-direct"],null,["^:A","~:source-map"],"/dev/null"]]]