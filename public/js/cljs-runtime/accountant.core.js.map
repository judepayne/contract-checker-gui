{"version":3,"sources":["accountant/core.cljs"],"mappings":"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","names":["accountant.core/transformer-create-url","token","path-prefix","location","accountant.core/transformer-retrieve-token","js/accountant","js/accountant.core","js/accountant.core.history","accountant.core/history","transformer","js/goog.history.Html5History.TokenTransformer","js/goog.history.Html5History","js/window","accountant.core/dispatch-on-navigate","history","nav-handler","G__35732","G__35733","G__35734","goog.events/listen","goog.history.EventType/NAVIGATE","e","accountant.core/get-href-attribute","node","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Node.ELEMENT_NODE","accountant.core/find-href-node","href","attrs","navigation-link?","cljs.core/not","temp__5720__auto__","parent","accountant.core/uri->query","uri","query","cljs.core/empty?","accountant.core/uri->fragment","fragment","accountant.core/prevent-reload-on-known-path","path-exists?","reload-same-path?","G__35737","G__35738","G__35739","js/document","target","button","meta-key","alt-key","ctrl-key","shift-key","any-key","or__4131__auto__","href-node","link-target","js/goog.Uri","path","relative-href","title","host","port","current-host","js/window.location.hostname","current-port","js/window.location.port","loc","js/window.location","current-relative-href","fexpr__35743","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__35744","G__35745","goog.events/dispatchEvent","js/goog.history.Event","js/accountant.core.nav-handler","accountant.core/nav-handler","js/accountant.core.path-exists?","accountant.core/path-exists?","js/accountant.core.document-click-handler-listener-key","accountant.core/document-click-handler-listener-key","js/accountant.core.navigate-listener-key","accountant.core/navigate-listener-key","p__35748","map__35749","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","accountant.core/configure-navigation!","accountant.core/unconfigure-navigation!","seq__35753","cljs.core/seq","chunk__35754","count__35755","i__35756","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","key","goog.events/unlistenByKey","accountant.core/map->params","params","p1__35761#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/keys","values","cljs.core/vals","pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","clojure.string.join.cljs$core$IFn$_invoke$arity$2","p1__35762#","var_args","G__35768","accountant.core/navigate!","js/Error","route","accountant.core.navigate_BANG_.cljs$core$IFn$_invoke$arity$2","old-route","clojure.string.split.cljs$core$IFn$_invoke$arity$2","query-string","cljs.core/reduce-kv","valid","k","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","with-params","js/console.error","accountant.core/dispatch-current!","hash","G__35773"],"sourcesContent":["(ns accountant.core\n  \"The only namespace in this library.\"\n  (:require [clojure.string :as str]\n            [goog.events :as events]\n            [goog.history.EventType :as EventType])\n  (:import goog.history.Event\n           goog.history.Html5History\n           goog.Uri))\n\n(defn- transformer-create-url\n  [token path-prefix location]\n  (str path-prefix token))\n\n(defn- transformer-retrieve-token\n  [path-prefix location]\n  (str (.-pathname location) (.-search location) (.-hash location)))\n\n(defonce history (let [transformer (goog.history.Html5History.TokenTransformer.)]\n                   (set! (.. transformer -retrieveToken) transformer-retrieve-token)\n                   (set! (.. transformer -createUrl) transformer-create-url)\n                   (Html5History. js/window transformer)))\n\n(defn- dispatch-on-navigate\n  [history nav-handler]\n  (events/listen\n    history\n    EventType/NAVIGATE\n    (fn [e]\n      (let [token (.-token e)]\n        (nav-handler token)))))\n\n(defn- get-href-attribute\n  \"Given a DOM node, if it is an element node, return its href attribute.\n  Otherwise, return nil.\"\n  [node]\n  (when (and node (= (.-nodeType node) js/Node.ELEMENT_NODE))\n    (.getAttribute node \"href\")))\n\n(defn- find-href-node\n  \"Given a DOM element that may or may not be a link, traverse up the DOM tree\n  to see if any of its parents are links. If so, return the href content, if\n  it does not have an explicit `data-trigger` attribute to signify a non-navigational\n  link element.\"\n  [e]\n  (let [href (get-href-attribute e)\n        attrs (.-attributes e)\n        navigation-link? (and href attrs (-> attrs (aget \"data-trigger\") not))]\n    (if navigation-link?\n      e\n      (when-let [parent (.-parentNode e)]\n        (recur parent)))))\n\n(defn- uri->query [uri]\n  (let [query (.getQuery uri)]\n    (when-not (empty? query)\n      (str \"?\" query))))\n\n(defn- uri->fragment [uri]\n  (let [fragment (.getFragment uri)]\n    (when-not (empty? fragment)\n      (str \"#\" fragment))))\n\n(defn- prevent-reload-on-known-path\n  \"Create a click handler that blocks page reloads for known routes\"\n  [history path-exists? reload-same-path?]\n  (events/listen\n   js/document\n   \"click\"\n   (fn [e]\n     (let [target (.-target e)\n           button (.-button e)\n           meta-key (.-metaKey e)\n           alt-key (.-altKey e)\n           ctrl-key (.-ctrlKey e)\n           shift-key (.-shiftKey e)\n           any-key (or meta-key alt-key ctrl-key shift-key)\n           href-node (find-href-node target)\n           href (when href-node (.-href href-node))\n           link-target (when href-node (.-target href-node))\n           uri (.parse Uri href)\n           path (.getPath uri)\n           query (uri->query uri)\n           fragment (uri->fragment uri)\n           relative-href (str path query fragment)\n           title (.-title target)\n           host (.getDomain uri)\n           port (.getPort uri)\n           current-host js/window.location.hostname\n           current-port js/window.location.port\n           loc js/window.location\n           current-relative-href (str (.-pathname loc) (.-search loc) (.-hash loc))]\n       (when (and (not any-key)\n                  (#{\"\" \"_self\"} link-target)\n                  (= button 0)\n                  (= host current-host)\n                  (or (not port)\n                      (= (str port) (str current-port)))\n                  (path-exists? path))\n         (when (not= current-relative-href relative-href) ;; do not add duplicate html5 history state\n           (. history (setToken relative-href title)))\n         (.preventDefault e)\n         (when reload-same-path?\n           (events/dispatchEvent history (Event. path true))))))))\n\n(defonce nav-handler nil)\n(defonce path-exists? nil)\n(defonce document-click-handler-listener-key nil)\n(defonce navigate-listener-key nil)\n\n(defn configure-navigation!\n  \"Create and configure HTML5 history navigation.\n\n  nav-handler: a fn of one argument, a path. Called when we've decided\n  to navigate to another page. You'll want to make your app draw the\n  new page here.\n\n  path-exists?: a fn of one argument, a path. Return truthy if this path is handled by the SPA\"\n  [{:keys [nav-handler path-exists? reload-same-path?]}]\n  (.setUseFragment history false)\n  (.setPathPrefix history \"\")\n  (.setEnabled history true)\n  (set! accountant.core/nav-handler nav-handler)\n  (set! accountant.core/path-exists? path-exists?)\n  (set! document-click-handler-listener-key (dispatch-on-navigate history nav-handler))\n  (set! navigate-listener-key (prevent-reload-on-known-path history path-exists? reload-same-path?)))\n\n(defn unconfigure-navigation!\n  \"Teardown HTML5 history navigation.\n\n  Undoes all of the stateful changes, including unlistening to events, that are setup as part of\n  the call to `configure-navigation!`.\"\n  []\n  (set! nav-handler nil)\n  (set! path-exists? nil)\n  (doseq [key [document-click-handler-listener-key navigate-listener-key]]\n    (when key (events/unlistenByKey key))))\n\n(defn map->params [query]\n  (let [params (map #(name %) (keys query))\n        values (vals query)\n        pairs (partition 2 (interleave params values))]\n    (str/join \"&\" (map #(str/join \"=\" %) pairs))))\n\n(defn navigate!\n  \"add a browser history entry. updates window/location\"\n  ([route] (navigate! route {}))\n  ([route query]\n   (if nav-handler\n     (let [token (.getToken history)\n           old-route (first (str/split token \"?\"))\n           query-string (map->params (reduce-kv (fn [valid k v]\n                                                  (if v\n                                                    (assoc valid k v)\n                                                    valid)) {} query))\n           with-params (if (empty? query-string)\n                         route\n                         (str route \"?\" query-string))]\n       (if (= old-route route)\n         (. history (replaceToken with-params))\n         (. history (setToken with-params))))\n     (js/console.error \"can't navigate! until configure-navigation! called\"))))\n\n(defn dispatch-current! []\n  \"Dispatch current URI path.\"\n  (let [path (-> js/window .-location .-pathname)\n        query (-> js/window .-location .-search)\n        hash (-> js/window .-location .-hash)]\n    (if nav-handler\n      (nav-handler (str path query hash))\n      (js/console.error \"can't dispatch-current until configure-navigation! called\"))))\n"]}